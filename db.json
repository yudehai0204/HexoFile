{"meta":{"version":1,"warehouse":"2.2.0"},"models":{"Asset":[{"_id":"source/README","path":"README","modified":0,"renderable":0},{"_id":"source/favicon.png","path":"favicon.png","modified":1,"renderable":0},{"_id":"themes/shana/source/css/style.styl","path":"css/style.styl","modified":0,"renderable":1},{"_id":"themes/shana/source/js/script.js","path":"js/script.js","modified":0,"renderable":1},{"_id":"themes/shana/source/css/fontawesome/font-awesome-ie7.css","path":"css/fontawesome/font-awesome-ie7.css","modified":0,"renderable":1},{"_id":"themes/shana/source/css/fontawesome/font-awesome-ie7.min.css","path":"css/fontawesome/font-awesome-ie7.min.css","modified":0,"renderable":1},{"_id":"themes/shana/source/css/fontawesome/font-awesome.css","path":"css/fontawesome/font-awesome.css","modified":0,"renderable":1},{"_id":"themes/shana/source/css/fontawesome/font-awesome.min.css","path":"css/fontawesome/font-awesome.min.css","modified":0,"renderable":1},{"_id":"themes/shana/source/css/fonts/FontAwesome.otf","path":"css/fonts/FontAwesome.otf","modified":0,"renderable":1},{"_id":"themes/shana/source/css/fonts/fontawesome-webfont.eot","path":"css/fonts/fontawesome-webfont.eot","modified":0,"renderable":1},{"_id":"themes/shana/source/css/fonts/fontawesome-webfont.woff","path":"css/fonts/fontawesome-webfont.woff","modified":0,"renderable":1},{"_id":"themes/shana/source/css/images/icon.png","path":"css/images/icon.png","modified":0,"renderable":1},{"_id":"themes/shana/source/css/images/icon2.png","path":"css/images/icon2.png","modified":0,"renderable":1},{"_id":"themes/shana/source/css/plugin/animate.styl","path":"css/plugin/animate.styl","modified":0,"renderable":1},{"_id":"themes/shana/source/css/plugin/hover.styl","path":"css/plugin/hover.styl","modified":0,"renderable":1},{"_id":"themes/shana/source/plugin/fancybox/blank.gif","path":"plugin/fancybox/blank.gif","modified":0,"renderable":1},{"_id":"themes/shana/source/plugin/bganimation/bg.css","path":"plugin/bganimation/bg.css","modified":0,"renderable":1},{"_id":"themes/shana/source/plugin/fancybox/fancybox_loading.gif","path":"plugin/fancybox/fancybox_loading.gif","modified":0,"renderable":1},{"_id":"themes/shana/source/plugin/fancybox/fancybox_loading@2x.gif","path":"plugin/fancybox/fancybox_loading@2x.gif","modified":0,"renderable":1},{"_id":"themes/shana/source/plugin/fancybox/fancybox_overlay.png","path":"plugin/fancybox/fancybox_overlay.png","modified":0,"renderable":1},{"_id":"themes/shana/source/plugin/fancybox/fancybox_sprite@2x.png","path":"plugin/fancybox/fancybox_sprite@2x.png","modified":0,"renderable":1},{"_id":"themes/shana/source/plugin/fancybox/fancybox_sprite.png","path":"plugin/fancybox/fancybox_sprite.png","modified":0,"renderable":1},{"_id":"themes/shana/source/plugin/fancybox/jquery.fancybox.css","path":"plugin/fancybox/jquery.fancybox.css","modified":0,"renderable":1},{"_id":"themes/shana/source/plugin/fancybox/jquery.fancybox.pack.js","path":"plugin/fancybox/jquery.fancybox.pack.js","modified":0,"renderable":1},{"_id":"themes/shana/source/plugin/fancybox/jquery.fancybox.js","path":"plugin/fancybox/jquery.fancybox.js","modified":0,"renderable":1},{"_id":"themes/shana/source/plugin/galmenu/GalMenu.css","path":"plugin/galmenu/GalMenu.css","modified":0,"renderable":1},{"_id":"themes/shana/source/plugin/galmenu/GalMenu.js","path":"plugin/galmenu/GalMenu.js","modified":0,"renderable":1},{"_id":"themes/shana/source/css/fonts/fontawesome-webfont.ttf","path":"css/fonts/fontawesome-webfont.ttf","modified":0,"renderable":1},{"_id":"themes/shana/source/plugin/galmenu/img.png","path":"plugin/galmenu/img.png","modified":0,"renderable":1},{"_id":"themes/shana/source/plugin/galmenu/wulusai.mp3","path":"plugin/galmenu/wulusai.mp3","modified":0,"renderable":1},{"_id":"themes/shana/source/plugin/fancybox/helpers/fancybox_buttons.png","path":"plugin/fancybox/helpers/fancybox_buttons.png","modified":0,"renderable":1},{"_id":"themes/shana/source/plugin/fancybox/helpers/jquery.fancybox-buttons.js","path":"plugin/fancybox/helpers/jquery.fancybox-buttons.js","modified":0,"renderable":1},{"_id":"themes/shana/source/plugin/fancybox/helpers/jquery.fancybox-buttons.css","path":"plugin/fancybox/helpers/jquery.fancybox-buttons.css","modified":0,"renderable":1},{"_id":"themes/shana/source/plugin/fancybox/helpers/jquery.fancybox-media.js","path":"plugin/fancybox/helpers/jquery.fancybox-media.js","modified":0,"renderable":1},{"_id":"themes/shana/source/plugin/fancybox/helpers/jquery.fancybox-thumbs.css","path":"plugin/fancybox/helpers/jquery.fancybox-thumbs.css","modified":0,"renderable":1},{"_id":"themes/shana/source/plugin/fancybox/helpers/jquery.fancybox-thumbs.js","path":"plugin/fancybox/helpers/jquery.fancybox-thumbs.js","modified":0,"renderable":1},{"_id":"themes/shana/source/css/fonts/fontawesome-webfont.svg","path":"css/fonts/fontawesome-webfont.svg","modified":0,"renderable":1},{"_id":"themes/shana/source/css/images/banne1r.jpg","path":"css/images/banne1r.jpg","modified":0,"renderable":1},{"_id":"themes/shana/source/css/images/banner.jpg","path":"css/images/banner.jpg","modified":0,"renderable":1},{"_id":"source/CNAME","path":"CNAME","modified":0,"renderable":0}],"Cache":[{"_id":"source/README","hash":"161dee2b8c1e12040a0733ea6accb406c1ef5ae1","modified":1494834949655},{"_id":"source/favicon.png","hash":"9702f48363ad0372572de5a51f9ed9c0a331efed","modified":1495173337290},{"_id":"source/新建文本文档.txt","hash":"18acf974f14de93d6349fc64ac55760f879f5560","modified":1493703561218},{"_id":"themes/shana/README.md","hash":"a9c43a77336140bef2da89947cf0f667a89716d4","modified":1493704486619},{"_id":"themes/shana/.gitignore","hash":"ea2b285a29690f1eabbad0f3a158e34e9ccd1d86","modified":1493704486619},{"_id":"themes/shana/_config.yml","hash":"dda2797cacd12feda7b05084da319987860fd377","modified":1493718688525},{"_id":"themes/shana/LICENSE","hash":"fc4ad28c989781cc67a41df069b8348e214ab812","modified":1493704486619},{"_id":"themes/shana/package.json","hash":"88a4f665067397eb15ab90423027eb25c96be222","modified":1493704486639},{"_id":"source/_posts/Android适配6-0，全局Dialog终极解决方案.md","hash":"2edd9a9a85d28e6f6d02dce17ebb85fe7ee1d9d7","modified":1493715076773},{"_id":"source/_posts/Activity销毁时如何保存Fragment状态.md","hash":"d9b2952612da7272677df310a39909165f21321e","modified":1493715064937},{"_id":"source/_posts/android-自动播放Banner.md","hash":"9100caa8e6ef74f2cfeaac1b7e42857a12f2f7b6","modified":1493715086057},{"_id":"source/_posts/hello-world.md","hash":"78f1a4fbb08f427bf83aee6b24a0481bc0ee242e","modified":1493715093893},{"_id":"source/tags/index.md","hash":"77738dafd6e79edc4816aca40d2bfd706905450b","modified":1493704486621},{"_id":"source/categories/index.md","hash":"30e8b5db11dfd7b1e5e881fe97f29334d8a34e22","modified":1493704486621},{"_id":"themes/shana/.git/FETCH_HEAD","hash":"72d3a2a01f0ab016402f1daf7ebc4200321f6072","modified":1493715253280},{"_id":"themes/shana/.git/HEAD","hash":"acbaef275e46a7f14c1ef456fff2c8bbe8c84724","modified":1493704486606},{"_id":"themes/shana/.git/ORIG_HEAD","hash":"3bd3019b99037b54c4cc48ff310c6f74056da3cf","modified":1493715253432},{"_id":"themes/shana/.git/config","hash":"c807e4965ab6e50b82d4fdd3d2c3fd16367e6f4e","modified":1493704486611},{"_id":"themes/shana/.git/description","hash":"9635f1b7e12c045212819dd934d809ef07efa2f4","modified":1493704480886},{"_id":"themes/shana/.git/index","hash":"61f8b3382b8dd18d163215b8043edaeecaa9872b","modified":1493704486675},{"_id":"themes/shana/.git/packed-refs","hash":"26e6ecf59058d11ca4aad26cf0e3a67c141ab7be","modified":1493704486601},{"_id":"themes/shana/languages/fr.yml","hash":"b4be1c1592a72012e48df2b3ec41cc9685573e50","modified":1493704486623},{"_id":"themes/shana/languages/default.yml","hash":"f26a34a7983d4bc17c65c7f0f14da598e62ce66d","modified":1493704486622},{"_id":"themes/shana/languages/no.yml","hash":"ddf2035e920a5ecb9076138c184257d9f51896a7","modified":1493704486623},{"_id":"themes/shana/languages/nl.yml","hash":"3d82ec703d0b3287739d7cb4750a715ae83bfcb3","modified":1493704486623},{"_id":"themes/shana/languages/ru.yml","hash":"2a476b4c6e04900914c81378941640ac5d58a1f0","modified":1493704486623},{"_id":"themes/shana/languages/zh-TW.yml","hash":"f5f0ca88185da7a8457760d84bf221781473bd7c","modified":1493704486624},{"_id":"themes/shana/languages/zh-CN.yml","hash":"da83da6b8367cb749b9f3e2885600b515057af15","modified":1493704486624},{"_id":"themes/shana/layout/archive.ejs","hash":"ae0149112760550ec5b5791aed25a9f558008969","modified":1493704486635},{"_id":"themes/shana/layout/categories.ejs","hash":"f5c915b57e9602448ead49cc268f3c43e67eb135","modified":1493704486636},{"_id":"themes/shana/layout/category.ejs","hash":"6bb634b555083f54904536b0f159c7b3e8febdd7","modified":1493704486636},{"_id":"themes/shana/layout/index.ejs","hash":"aa1b4456907bdb43e629be3931547e2d29ac58c8","modified":1493704486636},{"_id":"themes/shana/layout/layout.ejs","hash":"c764e113602336c9e21c03bf94090bf5ab999781","modified":1493704486637},{"_id":"themes/shana/layout/page.ejs","hash":"7d80e4e36b14d30a7cd2ac1f61376d9ebf264e8b","modified":1493704486637},{"_id":"themes/shana/layout/post.ejs","hash":"7d80e4e36b14d30a7cd2ac1f61376d9ebf264e8b","modified":1493704486638},{"_id":"themes/shana/layout/tag.ejs","hash":"eaa7b4ccb2ca7befb90142e4e68995fb1ea68b2e","modified":1493704486638},{"_id":"themes/shana/layout/tags.ejs","hash":"90c48448d469a328bdb5ddaff4c23aaa38350f4a","modified":1493704486638},{"_id":"themes/shana/scripts/fancybox.js","hash":"4c130fc242cf9b59b5df6ca5eae3b14302311e8c","modified":1493704486639},{"_id":"themes/shana/.git/hooks/applypatch-msg.sample","hash":"4de88eb95a5e93fd27e78b5fb3b5231a8d8917dd","modified":1493704480887},{"_id":"themes/shana/.git/hooks/commit-msg.sample","hash":"ee1ed5aad98a435f2020b6de35c173b75d9affac","modified":1493704480888},{"_id":"themes/shana/.git/hooks/post-update.sample","hash":"b614c2f63da7dca9f1db2e7ade61ef30448fc96c","modified":1493704480888},{"_id":"themes/shana/.git/hooks/pre-applypatch.sample","hash":"f208287c1a92525de9f5462e905a9d31de1e2d75","modified":1493704480888},{"_id":"themes/shana/.git/hooks/pre-commit.sample","hash":"36aed8976dcc08b5076844f0ec645b18bc37758f","modified":1493704480889},{"_id":"themes/shana/.git/hooks/pre-push.sample","hash":"5c8518bfd1d1d3d2c1a7194994c0a16d8a313a41","modified":1493704480890},{"_id":"themes/shana/.git/hooks/pre-rebase.sample","hash":"5885a56ab4fca8075a05a562d005e922cde9853b","modified":1493704480891},{"_id":"themes/shana/.git/hooks/prepare-commit-msg.sample","hash":"2b6275eda365cad50d167fe3a387c9bc9fedd54f","modified":1493704480892},{"_id":"themes/shana/.git/hooks/pre-receive.sample","hash":"705a17d259e7896f0082fe2e9f2c0c3b127be5ac","modified":1493704480891},{"_id":"themes/shana/.git/hooks/update.sample","hash":"e729cd61b27c128951d139de8e7c63d1a3758dde","modified":1493704480892},{"_id":"themes/shana/.git/info/exclude","hash":"c879df015d97615050afa7b9641e3352a1e701ac","modified":1493704480893},{"_id":"themes/shana/.git/logs/HEAD","hash":"ffab77555f9b7f8b87d69a7ba8c4e93fe52cc29b","modified":1493704486608},{"_id":"themes/shana/_source/categories/index.md","hash":"30e8b5db11dfd7b1e5e881fe97f29334d8a34e22","modified":1493704486621},{"_id":"themes/shana/_source/tags/index.md","hash":"77738dafd6e79edc4816aca40d2bfd706905450b","modified":1493704486621},{"_id":"themes/shana/layout/_partial/after-footer.ejs","hash":"57734d076129799de01c9fad8a246cb821741fbf","modified":1493704486626},{"_id":"themes/shana/layout/_partial/article.ejs","hash":"5d8d31fbe822bb62194fea26cffbfc1d1e14a7f9","modified":1493704486627},{"_id":"themes/shana/layout/_partial/archive-post.ejs","hash":"5062c723721d8497eebad372f57092ade45041f4","modified":1493704486626},{"_id":"themes/shana/layout/_partial/archive.ejs","hash":"e7858f113ee9f42ab21b303efaa1612168385a72","modified":1493704486627},{"_id":"themes/shana/layout/_partial/galmenu.ejs","hash":"6ade50ebcd908d1e248a087c41e239cb717138c1","modified":1493704486629},{"_id":"themes/shana/layout/_partial/footer.ejs","hash":"35a9963e9aad35a4d953b1fd2c09f9201183b819","modified":1493704486628},{"_id":"themes/shana/layout/_partial/bganimation.ejs","hash":"ef6e9ccefee88265255b4789a6318d7ee80f1f77","modified":1493704486627},{"_id":"themes/shana/layout/_partial/google-analytics.ejs","hash":"1ccc627d7697e68fddc367c73ac09920457e5b35","modified":1493704486629},{"_id":"themes/shana/layout/_partial/head.ejs","hash":"9ad9e603ccb22232c1ad8cdfbda280a7b2902e7c","modified":1493704486629},{"_id":"themes/shana/layout/_partial/header.ejs","hash":"148bdf714dd1a7bf55e571f13808ceae079200cc","modified":1493704486629},{"_id":"themes/shana/layout/_partial/lean-analytics.ejs","hash":"ca5a9b7aad67406896bcf8f9d372acac39cbbb51","modified":1493704486630},{"_id":"themes/shana/layout/_partial/mobile-header.ejs","hash":"dd0088099a0b322d4cc64a86837786421a20d257","modified":1493704486630},{"_id":"themes/shana/layout/_partial/mobile-nav.ejs","hash":"347cf1befd2ea637c24bd5901929d8e36e359e75","modified":1493704486631},{"_id":"themes/shana/layout/_partial/sidebar.ejs","hash":"c70869569749a8f48cce202fa57926c06b55fdab","modified":1493704486633},{"_id":"themes/shana/layout/_widget/about.ejs","hash":"6bdeaad8de81d37bff204115ee0fe47a4eb32993","modified":1493704486635},{"_id":"themes/shana/layout/_widget/nav.ejs","hash":"5e3d307e49c7934b1b9343b81488fd07e18a7f01","modified":1493704486635},{"_id":"themes/shana/source/css/_extend.styl","hash":"1dca7bc1bf3cc3c4af7385191f74f15292ec0fb9","modified":1493704486640},{"_id":"themes/shana/source/css/_variables.styl","hash":"358508fc755f0af7072e4390a33fd3287d2aba9e","modified":1493704486647},{"_id":"themes/shana/source/css/style.styl","hash":"44c81410d70af1aa39914d7959e320ce26a1d606","modified":1493704486664},{"_id":"themes/shana/source/js/script.js","hash":"c0d368681c687258b628bacc84cc30d353de6d47","modified":1493704486664},{"_id":"themes/shana/.git/objects/pack/pack-0ef309887328f6935ad9a24c3517d543a57f06fb.idx","hash":"34bb0c8bdc7b6b68ec07dc3067dc404cbaf08cd1","modified":1493704486429},{"_id":"themes/shana/.git/refs/heads/master","hash":"3bd3019b99037b54c4cc48ff310c6f74056da3cf","modified":1493704486608},{"_id":"themes/shana/layout/_partial/post/category.ejs","hash":"fc6f4836ecb48c876e28d9336f00cc1775202cb9","modified":1493704486631},{"_id":"themes/shana/layout/_partial/post/date.ejs","hash":"8a17b4f64d8bbc522d5d028700c85cda9db715a7","modified":1493704486632},{"_id":"themes/shana/layout/_partial/post/gallery.ejs","hash":"b0bf3f5d923c261ca2b5fabab513f1ec2708c8ca","modified":1493704486632},{"_id":"themes/shana/layout/_partial/post/nav.ejs","hash":"cbb3819ce512bd24db8bad41b8617d46eba82fdc","modified":1493704486632},{"_id":"themes/shana/layout/_partial/post/view.ejs","hash":"5191ec468768e3243da247bc4ad770a511ce3fa9","modified":1493704486633},{"_id":"themes/shana/layout/_partial/post/tag.ejs","hash":"694b5101bcc44c9f9c1cc62e5ad2fdfb4b7c7a07","modified":1493704486633},{"_id":"themes/shana/layout/_partial/post/title.ejs","hash":"d4a460a35e2112d0c7414fd5e19b3a16093f1caf","modified":1493704486633},{"_id":"themes/shana/source/css/_partial/archive.styl","hash":"605a72f468a9f5bf001964241cb683c5b8f0cd0a","modified":1493704486641},{"_id":"themes/shana/source/css/_partial/article.styl","hash":"15ef2b9dfc0b07b1a7d89b37dab9550111178190","modified":1493704486641},{"_id":"themes/shana/source/css/_partial/categories.styl","hash":"964cf546f177383511f6cfda78f78d67b281eed4","modified":1493704486641},{"_id":"themes/shana/source/css/_partial/footer.styl","hash":"b00c4d04ca55f9fba9322d2314dc4f07bc3fe998","modified":1493704486642},{"_id":"themes/shana/source/css/_partial/header.styl","hash":"67e59feb18eee6026717cb440d86ab9551782628","modified":1493704486643},{"_id":"themes/shana/source/css/_partial/highlight.styl","hash":"d2c2ca89ab2d52dbbbd767a304ebd793d5509122","modified":1493704486643},{"_id":"themes/shana/source/css/_partial/sidebar-aside.styl","hash":"1fb15f13ba70d5b954f62920c6b63d26e2fb2985","modified":1493704486644},{"_id":"themes/shana/source/css/_partial/sidebar-bottom.styl","hash":"4132e25ba9680c4b911a01abc75f501cda3fa4f1","modified":1493704486644},{"_id":"themes/shana/source/css/_partial/sidebar.styl","hash":"9f3637b69491cf61bc24328ff7c27ba4c72fad32","modified":1493704486645},{"_id":"themes/shana/source/css/_partial/tags.styl","hash":"1909f74f678f0fd33a6ff6a92f1427c8f413beba","modified":1493704486645},{"_id":"themes/shana/source/css/_partial/mobile.styl","hash":"c781dbb86614a4d825953a2e00de61ee410bacbe","modified":1493704486644},{"_id":"themes/shana/source/css/_partial/views.styl","hash":"fba8d0ec66ca6dd3e7a521dbd2308954aa534a9c","modified":1493704486646},{"_id":"themes/shana/source/css/_partial/comment.styl","hash":"2834870661e490775f9154d71638bfdc72e640a6","modified":1493704486642},{"_id":"themes/shana/source/css/fontawesome/font-awesome-ie7.css","hash":"cbbd3d62d4db8f8ebf6916c6c049de2a5bafa933","modified":1493704486648},{"_id":"themes/shana/source/css/fontawesome/font-awesome-ie7.min.css","hash":"4e2217c8c7c703f79a416a7bd8795a18a2d16805","modified":1493704486648},{"_id":"themes/shana/source/css/fontawesome/font-awesome.css","hash":"6589bcd1956889dfb72a0c0d46f2305beac724e7","modified":1493704486649},{"_id":"themes/shana/source/css/fontawesome/font-awesome.min.css","hash":"004fc9bfc4cb2a8e63695fe0b5f886e977e63a48","modified":1493704486650},{"_id":"themes/shana/source/css/fonts/FontAwesome.otf","hash":"b5b4f9be85f91f10799e87a083da1d050f842734","modified":1493704486651},{"_id":"themes/shana/source/css/fonts/fontawesome-webfont.eot","hash":"7619748fe34c64fb157a57f6d4ef3678f63a8f5e","modified":1493704486652},{"_id":"themes/shana/source/css/fonts/fontawesome-webfont.woff","hash":"04c3bf56d87a0828935bd6b4aee859995f321693","modified":1493704486656},{"_id":"themes/shana/source/css/_util/grid.styl","hash":"1aa883ab432d9e4139c89dcbd40ae2bd1528d029","modified":1493704486646},{"_id":"themes/shana/source/css/_util/mixin.styl","hash":"429bad87fc156eacf226c5e35b0eafc277f2504b","modified":1493704486646},{"_id":"themes/shana/source/css/images/icon.png","hash":"3d0fded53a72989eef952b9ae57425544d171107","modified":1493704486662},{"_id":"themes/shana/source/css/images/icon2.png","hash":"918f36dc1740436fcbf7684f771c913d21829336","modified":1493704486662},{"_id":"themes/shana/source/css/plugin/animate.styl","hash":"b8b17f5f9255ef2a8865fe9dd8025634ad20d209","modified":1493704486663},{"_id":"themes/shana/source/css/plugin/hover.styl","hash":"a5d29bcd4028208eafd4031d3cf3ccf019c71777","modified":1493704486663},{"_id":"themes/shana/source/plugin/fancybox/blank.gif","hash":"2daeaa8b5f19f0bc209d976c02bd6acb51b00b0a","modified":1493704486666},{"_id":"themes/shana/source/plugin/bganimation/bg.css","hash":"c60d0d778321b7d33b13cc6ea30417643c8e9453","modified":1493721520671},{"_id":"themes/shana/source/plugin/fancybox/fancybox_loading.gif","hash":"1a755fb2599f3a313cc6cfdb14df043f8c14a99c","modified":1493704486666},{"_id":"themes/shana/source/plugin/fancybox/fancybox_loading@2x.gif","hash":"273b123496a42ba45c3416adb027cd99745058b0","modified":1493704486666},{"_id":"themes/shana/source/plugin/fancybox/fancybox_overlay.png","hash":"b3a4ee645ba494f52840ef8412015ba0f465dbe0","modified":1493704486667},{"_id":"themes/shana/source/plugin/fancybox/fancybox_sprite@2x.png","hash":"30c58913f327e28f466a00f4c1ac8001b560aed8","modified":1493704486667},{"_id":"themes/shana/source/plugin/fancybox/fancybox_sprite.png","hash":"17df19f97628e77be09c352bf27425faea248251","modified":1493704486667},{"_id":"themes/shana/source/plugin/fancybox/jquery.fancybox.css","hash":"2e54d51d21e68ebc4bb870f6e57d3bfb660d4f9c","modified":1493704486670},{"_id":"themes/shana/source/plugin/fancybox/jquery.fancybox.pack.js","hash":"2da892a02778236b64076e5e8802ef0566e1d9e8","modified":1493704486671},{"_id":"themes/shana/source/plugin/fancybox/jquery.fancybox.js","hash":"58193c802f307ec9bc9e586c0e8a13ebef45d2f8","modified":1493704486671},{"_id":"themes/shana/source/plugin/galmenu/GalMenu.css","hash":"2a1fdbbd30de26adcfb4f37de66abc5787365dc4","modified":1493704486672},{"_id":"themes/shana/source/plugin/galmenu/GalMenu.js","hash":"54f86564b181abd8f9746bca5fc142a9f041bb30","modified":1493704486672},{"_id":"themes/shana/source/css/fonts/fontawesome-webfont.ttf","hash":"7f09c97f333917034ad08fa7295e916c9f72fd3f","modified":1493704486656},{"_id":"themes/shana/source/plugin/galmenu/img.png","hash":"05f69ea7da06bc228eac4d2ef80d0c8d2131bd05","modified":1493704486673},{"_id":"themes/shana/source/plugin/galmenu/wulusai.mp3","hash":"34e7bc2cf591f7b38a2c709a8c9fd84bdf197a59","modified":1493704486674},{"_id":"themes/shana/.git/logs/refs/heads/master","hash":"ffab77555f9b7f8b87d69a7ba8c4e93fe52cc29b","modified":1493704486609},{"_id":"themes/shana/.git/refs/remotes/origin/HEAD","hash":"d9427cda09aba1cdde5c69c2b13c905bddb0bc51","modified":1493704486605},{"_id":"themes/shana/source/plugin/fancybox/helpers/fancybox_buttons.png","hash":"e385b139516c6813dcd64b8fc431c364ceafe5f3","modified":1493704486668},{"_id":"themes/shana/source/plugin/fancybox/helpers/jquery.fancybox-buttons.js","hash":"4c9c395d705d22af7da06870d18f434e2a2eeaf9","modified":1493704486669},{"_id":"themes/shana/source/plugin/fancybox/helpers/jquery.fancybox-buttons.css","hash":"6394c48092085788a8c0ef72670b0652006231a1","modified":1493704486668},{"_id":"themes/shana/source/plugin/fancybox/helpers/jquery.fancybox-media.js","hash":"e14c32cc6823b81b2f758512f13ed8eb9ef2b454","modified":1493704486669},{"_id":"themes/shana/source/plugin/fancybox/helpers/jquery.fancybox-thumbs.css","hash":"b88b589f5f1aa1b3d87cc7eef34c281ff749b1ae","modified":1493704486669},{"_id":"themes/shana/source/plugin/fancybox/helpers/jquery.fancybox-thumbs.js","hash":"83cdfea43632b613771691a11f56f99d85fb6dbd","modified":1493704486669},{"_id":"themes/shana/source/css/fonts/fontawesome-webfont.svg","hash":"a275426daefd3716c53561fad121d258a7f05b47","modified":1493704486654},{"_id":"themes/shana/source/css/images/banne1r.jpg","hash":"f44aa591089fcb3ec79770a1e102fd3289a7c6a6","modified":1493704486659},{"_id":"themes/shana/source/css/images/banner.jpg","hash":"532bf5150abc6aedb871c8b05e5c8dacd4111f32","modified":1493704486662},{"_id":"themes/shana/.git/logs/refs/remotes/origin/HEAD","hash":"ffab77555f9b7f8b87d69a7ba8c4e93fe52cc29b","modified":1493704486605},{"_id":"themes/shana/.git/objects/pack/pack-0ef309887328f6935ad9a24c3517d543a57f06fb.pack","hash":"19bf73167cea8239fedf0fed39d224d244bf7d99","modified":1493704486449},{"_id":"public/atom.xml","hash":"36f83f007888643bb2883946ca38576802ada7f8","modified":1494835119110},{"_id":"public/sitemap.xml","hash":"b2e672e3f834a10580d6f696ffe43a93c85c9122","modified":1494835119201},{"_id":"public/tags/index.html","hash":"ff25adf4228d387ed64b9c8b2114de1cb63796c2","modified":1494835119208},{"_id":"public/categories/index.html","hash":"5287c9f5feffdb33d769a86575faca4c51c45de5","modified":1494835119208},{"_id":"public/2017/04/25/hello-world/index.html","hash":"277f57add98cdd1e44a9c13e74fd78a1c1f57a06","modified":1494835119208},{"_id":"public/2017/04/25/Activity销毁时如何保存Fragment状态/index.html","hash":"fb70bf99ad1d7420fb90ea4ddb366ae17c7e007d","modified":1494835119209},{"_id":"public/archives/index.html","hash":"c6054122f73ca86e923255e1c9c24995d92bd526","modified":1494835119209},{"_id":"public/archives/2017/index.html","hash":"f511e7b72b7a768326a93a0da201b806b3de9422","modified":1494835119209},{"_id":"public/archives/2017/04/index.html","hash":"f42e028637ed276ca066625b88e2592cb5a065f3","modified":1494835119209},{"_id":"public/index.html","hash":"b8483b7ba4aac035122a60a728f300396988681e","modified":1494835119209},{"_id":"public/tags/Android/index.html","hash":"c505e6304c81e6becb92eecfc29a332c7b464457","modified":1494835119209},{"_id":"public/2017/04/28/Android适配6-0，全局Dialog终极解决方案/index.html","hash":"f8ae910f1adbd9ea7099165c63651c1d0b7207f2","modified":1494835119209},{"_id":"public/2017/04/28/android-自动播放Banner/index.html","hash":"ce1dbd7a03f43a1a064d58ad926eee16d9c4d967","modified":1494835119209},{"_id":"public/新建文本文档.txt","hash":"18acf974f14de93d6349fc64ac55760f879f5560","modified":1494835119224},{"_id":"public/favicon.png","hash":"9702f48363ad0372572de5a51f9ed9c0a331efed","modified":1495173402257},{"_id":"public/css/fonts/fontawesome-webfont.woff","hash":"04c3bf56d87a0828935bd6b4aee859995f321693","modified":1494835119225},{"_id":"public/css/images/icon.png","hash":"3d0fded53a72989eef952b9ae57425544d171107","modified":1494835119225},{"_id":"public/css/images/icon2.png","hash":"918f36dc1740436fcbf7684f771c913d21829336","modified":1494835119225},{"_id":"public/plugin/fancybox/blank.gif","hash":"2daeaa8b5f19f0bc209d976c02bd6acb51b00b0a","modified":1494835119225},{"_id":"public/plugin/fancybox/fancybox_loading@2x.gif","hash":"273b123496a42ba45c3416adb027cd99745058b0","modified":1494835119225},{"_id":"public/plugin/fancybox/fancybox_loading.gif","hash":"1a755fb2599f3a313cc6cfdb14df043f8c14a99c","modified":1494835119225},{"_id":"public/plugin/fancybox/fancybox_overlay.png","hash":"b3a4ee645ba494f52840ef8412015ba0f465dbe0","modified":1494835119225},{"_id":"public/plugin/fancybox/fancybox_sprite@2x.png","hash":"30c58913f327e28f466a00f4c1ac8001b560aed8","modified":1494835119225},{"_id":"public/plugin/fancybox/fancybox_sprite.png","hash":"17df19f97628e77be09c352bf27425faea248251","modified":1494835119225},{"_id":"public/plugin/fancybox/helpers/fancybox_buttons.png","hash":"e385b139516c6813dcd64b8fc431c364ceafe5f3","modified":1494835119225},{"_id":"public/css/fonts/fontawesome-webfont.eot","hash":"7619748fe34c64fb157a57f6d4ef3678f63a8f5e","modified":1494835119225},{"_id":"public/css/fonts/FontAwesome.otf","hash":"b5b4f9be85f91f10799e87a083da1d050f842734","modified":1494835119226},{"_id":"public/README","hash":"161dee2b8c1e12040a0733ea6accb406c1ef5ae1","modified":1494835119226},{"_id":"public/plugin/galmenu/wulusai.mp3","hash":"34e7bc2cf591f7b38a2c709a8c9fd84bdf197a59","modified":1494835120135},{"_id":"public/css/fonts/fontawesome-webfont.ttf","hash":"7f09c97f333917034ad08fa7295e916c9f72fd3f","modified":1494835120140},{"_id":"public/plugin/galmenu/img.png","hash":"05f69ea7da06bc228eac4d2ef80d0c8d2131bd05","modified":1494835120143},{"_id":"public/js/script.js","hash":"2876e0b19ce557fca38d7c6f49ca55922ab666a1","modified":1494835120151},{"_id":"public/css/plugin/animate.css","hash":"7a1f3de057c416bd10edc288c7e8ac0b645232ab","modified":1494835120151},{"_id":"public/css/plugin/hover.css","hash":"54ec3d2774906f08e711ac0e494dccd09aefd570","modified":1494835120151},{"_id":"public/plugin/bganimation/bg.css","hash":"1894be73c047b48bbd54466745bdde1c63647aae","modified":1494835120151},{"_id":"public/plugin/fancybox/jquery.fancybox.css","hash":"aaa582fb9eb4b7092dc69fcb2d5b1c20cca58ab6","modified":1494835120151},{"_id":"public/plugin/galmenu/GalMenu.css","hash":"ae1357f888f3389bc4b39bde62d68533caefb6b5","modified":1494835120151},{"_id":"public/plugin/galmenu/GalMenu.js","hash":"8549620fcb0b6a9bb329b799906aba6fb41c61f0","modified":1494835120151},{"_id":"public/plugin/fancybox/helpers/jquery.fancybox-buttons.js","hash":"dc3645529a4bf72983a39fa34c1eb9146e082019","modified":1494835120151},{"_id":"public/plugin/fancybox/helpers/jquery.fancybox-media.js","hash":"294420f9ff20f4e3584d212b0c262a00a96ecdb3","modified":1494835120151},{"_id":"public/plugin/fancybox/helpers/jquery.fancybox-buttons.css","hash":"1a9d8e5c22b371fcc69d4dbbb823d9c39f04c0c8","modified":1494835120151},{"_id":"public/plugin/fancybox/helpers/jquery.fancybox-thumbs.css","hash":"4ac329c16a5277592fc12a37cca3d72ca4ec292f","modified":1494835120151},{"_id":"public/plugin/fancybox/helpers/jquery.fancybox-thumbs.js","hash":"47da1ae5401c24b5c17cc18e2730780f5c1a7a0c","modified":1494835120151},{"_id":"public/css/style.css","hash":"ba7d73617606d505e08df53fa9266461ecd44241","modified":1494835120151},{"_id":"public/css/fontawesome/font-awesome-ie7.css","hash":"e142f6748ea95bff17ba450ed071a17b066642c7","modified":1494835120151},{"_id":"public/css/fontawesome/font-awesome-ie7.min.css","hash":"d66b7374b5dd6259dfd5c4eb682925305f6716d4","modified":1494835120151},{"_id":"public/css/fontawesome/font-awesome.css","hash":"57ca25a18cbdedf36973b712bc81f9e3f883a371","modified":1494835120152},{"_id":"public/css/fontawesome/font-awesome.min.css","hash":"68e2602c02181b61eebc9e1dccb0a38377fa5df7","modified":1494835120152},{"_id":"public/plugin/fancybox/jquery.fancybox.pack.js","hash":"9e0d51ca1dbe66f6c0c7aefd552dc8122e694a6e","modified":1494835120152},{"_id":"public/plugin/fancybox/jquery.fancybox.js","hash":"d08b03a42d5c4ba456ef8ba33116fdbb7a9cabed","modified":1494835120152},{"_id":"public/css/fonts/fontawesome-webfont.svg","hash":"a275426daefd3716c53561fad121d258a7f05b47","modified":1494835120153},{"_id":"public/css/images/banne1r.jpg","hash":"f44aa591089fcb3ec79770a1e102fd3289a7c6a6","modified":1494835120154},{"_id":"public/css/images/banner.jpg","hash":"532bf5150abc6aedb871c8b05e5c8dacd4111f32","modified":1494835120154},{"_id":"source/CNAME","hash":"18acf974f14de93d6349fc64ac55760f879f5560","modified":1495164629286},{"_id":"public/CNAME","hash":"18acf974f14de93d6349fc64ac55760f879f5560","modified":1495164640088}],"Category":[],"Data":[],"Page":[{"title":"Tags","layout":"tags","_content":"","source":"tags/index.md","raw":"title: \"Tags\"\nlayout: \"tags\"\n---","date":"2017-05-02T09:41:46.416Z","updated":"2017-05-02T05:54:46.621Z","path":"tags/index.html","comments":1,"_id":"cj2pu8ffz00011kwc9e4fqlaf","content":"","site":{"data":{}},"excerpt":"","more":""},{"title":"categories","layout":"categories","_content":"","source":"categories/index.md","raw":"title: \"categories\"\nlayout: \"categories\"\n---\n","date":"2017-05-02T09:41:46.414Z","updated":"2017-05-02T05:54:46.621Z","path":"categories/index.html","comments":1,"_id":"cj2pu8fg300031kwchlioyazz","content":"","site":{"data":{}},"excerpt":"","more":""}],"Post":[{"title":"Android适配6.0，全局Dialog终极解决方案","date":"2017-04-28T07:18:52.000Z","_content":"6.0推出之后，部分手机完全限制了全局Toast弹出类型。so 撸主\n(http://blog.csdn.net/a940659387/article/details/50152561)  \n这个文章也该光荣退休了。\n**but 想要看这篇文章的童鞋应该先看撸主的前一篇文章，why?  because 你不看辣个就看不懂这个。**\n<!-- more -->\n### Application.ActivityLifecycleCallbacks ###\n\n顾明思议，肯定是用在Application中的 。 关于不知道怎么配置Application的童鞋可自行谷歌。\n\n再瞅，带着callback must 是一个接口。  没错  就是一个接口 一个在application中实现用来监听activity\n\n生命周期触发步骤的东东。\n\n#### 没图说个蛋蛋 先上图片 ####\n![这里写图片描述](http://img.blog.csdn.net/20160909141533953)\n\n#### 方法 ####\n\n```\n  @Override\n    public void onActivityCreated(Activity activity, Bundle savedInstanceState) {\n        if(activity.getParent()!=null){\n            NewContext = activity.getParent();\n        }else\n            NewContext = activity;\n    }\n\n    @Override\n    public void onActivityStarted(Activity activity) {\n        if(activity.getParent()!=null){\n            NewContext = activity.getParent();\n        }else\n            NewContext = activity;\n    }\n\n    @Override\n    public void onActivityResumed(Activity activity) {\n        if(activity.getParent()!=null){\n            NewContext = activity.getParent();\n        }else\n            NewContext = activity;\n    }\n\n    @Override\n    public void onActivityPaused(Activity activity) {\n            ToastUtils.getInstanse().cancel();\n    }\n\n    @Override\n    public void onActivityStopped(Activity activity) {\n\n    }\n\n    @Override\n    public void onActivitySaveInstanceState(Activity activity, Bundle outState) {\n    }\n\n    @Override\n    public void onActivityDestroyed(Activity activity) {\n\n    }\n```\n这个NewContext 就是我们的主要东东 记录当前用户停留在哪一个页面 。简单来说就是记录dialog弹出时\n\n应该依赖那个activity.\n\nsoso 为了适配新方法 我们在全局的service中也做了一些小小的改动哦 。不懂怎么写一个全局弹出\n\ndialog的service的童鞋请看这个文章；\n[http://blog.csdn.net/a940659387/article/details/50152561]\n\n\n本撸主还是粘出代码供your 一览吧。\n\n\n```\npublic class CommonDialogService extends Service implements CommonDialogListener{\n\t@Override\n\tpublic IBinder onBind(Intent intent) {\n\t\treturn null;\n\t}\n\t/**this is TV*/\n\tprivate static TextView tv;\n\tprivate static Dialog dialog;\n\t/**判断是否已经new Dialog*/\n\tprivate void showDialog(int iscancle){\n\n\t\tif(dialog==null){\n\t\tdialog = new Dialog(CommonApplication.NewContext, R.style.MyDialogStyle);\n\t\tView view = LayoutInflater.from(this).inflate(R.layout.progressbar_item,\n\t\t\t\tnull);\n\t\tdialog.setContentView(view);\n\t\ttv = (TextView) view.findViewById(R.id.mylaodint_text_id);\n\t\tImageView progressImageView = (ImageView) view\n\t\t\t\t.findViewById(R.id.myloading_image_id);\n\t\tAnimationDrawable animationDrawable = (AnimationDrawable) progressImageView\n\t\t\t\t.getDrawable();\n\t\tanimationDrawable.start();\n//\t\tWindowManager.LayoutParams windows = dialog.getWindow().getAttributes();\n//\t\t\twindows.type=WindowManager.LayoutParams.TYPE_TOAST;\n//\t\t\tdialog.getWindow().setAttributes(windows);\n//\t\tdialog.getWindow().setType(WindowManager.LayoutParams.TYPE_TOAST);\n\t\t\tif(iscancle==1){\n\t\t\t\tdialog.setCanceledOnTouchOutside(true);\n\t\t\t}else{\n\t\t\t\tdialog.setCanceledOnTouchOutside(false);\n\t\t\t}\n\n\t\t\tdialog.setOnKeyListener(new DialogInterface.OnKeyListener() {\n\t\t\t\t@Override\n\t\t\t\tpublic boolean onKey(DialogInterface dialog, int keyCode, KeyEvent event) {\n\t\t\t\t\tdialog.dismiss();\n\t\t\t\t\tdialog=null;\n\t\t\t\t\treturn false;\n\t\t\t\t}\n\t\t\t});\n\t\t\tdialog.setOnDismissListener(new DialogInterface.OnDismissListener() {\n\t\t\t\t@Override\n\t\t\t\tpublic void onDismiss(DialogInterface dialog) {\n\t\t\t\t\tdialog =null;\n\t\t\t\t}\n\t\t\t});\n\t\t}\n\n\t\tif(dialog!=null&&!dialog.isShowing()){\n\t\t\tdialog.show();\n\t\t\tWindowManager.LayoutParams lp = dialog.getWindow()\n\t\t\t\t\t.getAttributes();\n\t\t\tlp.width = ConstantsYiBaiSong.WinWidth/ 3;\n\t\t\tlp.height = LayoutParams.WRAP_CONTENT;\n\t\t\tdialog.getWindow().setAttributes(lp);\n\t\t\t}\n\t\t}\n\t\n\tpublic void onCreate() {\n\t\t/**this将此service与工具类绑定*/\n\t\tToastUtils.getInstanse().setListener(this);\n\t}\n\n\t\n\t/**showDialog*/\n\t@Override\n\tpublic void show() {\n\t\tshowDialog(1);\n\t\tdialog.setCancelable(true);\n\t\ttv.setText(\"请稍后...\");\n\n\t}\n\n\t/**cancleDialog*/\n\t@Override\n\tpublic void cancle() {\n\t\tif(null!=dialog){\n\t\t\tdialog.dismiss();\n\t\t\tdialog = null;\n\t\t}\n\t}\n\n\t/**show have custom Text dialog*/\n\t@Override\n\tpublic void showstr(String str) {\n\t\tshowDialog(1);\n\t\tdialog.setCancelable(true);\n\t\ttv.setText(str);\n\n\t}\n\n\t/**show uncancle's dialog */\n\t@Override\n\tpublic void showunCancle() {\n\t\tshowDialog(2);\n\t\tdialog.setCanceledOnTouchOutside(false);\n\t\tdialog.setCancelable(false);\n\t\ttv.setText(\"请稍后...\");\n\t}\n\n\t@Override\n\tpublic void setStr(String str) {\n\t\tif(dialog==null){\n\t\t\treturn;\n\t\t}\n\t\tif(dialog.isShowing()){\n//\t\t\tLog.e(\"TAG\", \"str====:\" + str);\n\t\t\ttv.setText(str+\"\");\n\t\t}\n\t}\n\n\t@Override\n\tpublic void showDismissListener(final ToastUtils.DisMisCallBack callBack) {\n\t\tif(CommonApplication.NewContext!=null&&dialog==null){\n\t\t\tdialog = new Dialog(CommonApplication.NewContext, R.style.MyDialogStyle);\n\t\t\tView view = LayoutInflater.from(this).inflate(R.layout.progressbar_item,\n\t\t\t\t\tnull);\n\t\t\tdialog.setContentView(view);\n\n\t\t\ttv = (TextView) view.findViewById(R.id.mylaodint_text_id);\n\t\t\tImageView progressImageView = (ImageView) view\n\t\t\t\t\t.findViewById(R.id.myloading_image_id);\n\n\t\t\tAnimationDrawable animationDrawable = (AnimationDrawable) progressImageView\n\t\t\t\t\t.getDrawable();\n\t\t\tanimationDrawable.start();\n\t\t\tdialog.setOnDismissListener(new DialogInterface.OnDismissListener() {\n\t\t\t\t@Override\n\t\t\t\tpublic void onDismiss(DialogInterface dialog) {\n\t\t\t\t\tcallBack.disMisCallBack();\n\t\t\t\t}});\n//\t\tWindowManager.LayoutParams windows = dialog.getWindow().getAttributes();\n//\t\t\twindows.type=WindowManager.LayoutParams.TYPE_TOAST;\n//\t\t\tdialog.getWindow().setAttributes(windows);\n//\t\tdialog.getWindow().setType(WindowManager.LayoutParams.TYPE_TOAST);\n//\t\t\tif(iscancle==1){\n//\t\t\t\tdialog.setCanceledOnTouchOutside(true);\n//\t\t\t}else{\n//\t\t\t\tdialog.setCanceledOnTouchOutside(false);\n//\t\t\t}\n\t\t}\n\t\tdialog.setCanceledOnTouchOutside(false);\n\t\tif(dialog!=null&&!dialog.isShowing()){\n\t\t\tdialog.show();\n\t\t\tWindowManager.LayoutParams lp = dialog.getWindow()\n\t\t\t\t\t.getAttributes();\n\t\t\tlp.width = ConstantsYiBaiSong.WinWidth/ 3;\n\t\t\tlp.height = LayoutParams.WRAP_CONTENT;\n\t\t\tdialog.getWindow().setAttributes(lp);\n\t\t}\n\n\t}\n\n\t;\n\n\t@Override\n\tpublic void onDestroy() {\n\t\tsuper.onDestroy();\n\t\tif(null!=dialog &&dialog.isShowing()){\n\t\t\tdialog.cancel();\n\t\t}\n\t}\n}\n```\n细心的童鞋可能已经发现 有些代码已经被注释了  。  因为么 不注释 6.0就会啪啪啪一直蹦。 you know .\n\n\n话到这里  撸主已经没有太多的话想说了。so女生压底图一张，然后上demo;\n\n![这里写图片描述](http://img.blog.csdn.net/20160909141659424)\n\n\ngit地址：[全局Dialog适配6.0](https://github.com/yudehai0204/ApplicationDialog)\n\n\n","source":"_posts/Android适配6-0，全局Dialog终极解决方案.md","raw":"---\ntitle: Android适配6.0，全局Dialog终极解决方案\ndate: 2017-04-28 15:18:52\ntags: Android\n---\n6.0推出之后，部分手机完全限制了全局Toast弹出类型。so 撸主\n(http://blog.csdn.net/a940659387/article/details/50152561)  \n这个文章也该光荣退休了。\n**but 想要看这篇文章的童鞋应该先看撸主的前一篇文章，why?  because 你不看辣个就看不懂这个。**\n<!-- more -->\n### Application.ActivityLifecycleCallbacks ###\n\n顾明思议，肯定是用在Application中的 。 关于不知道怎么配置Application的童鞋可自行谷歌。\n\n再瞅，带着callback must 是一个接口。  没错  就是一个接口 一个在application中实现用来监听activity\n\n生命周期触发步骤的东东。\n\n#### 没图说个蛋蛋 先上图片 ####\n![这里写图片描述](http://img.blog.csdn.net/20160909141533953)\n\n#### 方法 ####\n\n```\n  @Override\n    public void onActivityCreated(Activity activity, Bundle savedInstanceState) {\n        if(activity.getParent()!=null){\n            NewContext = activity.getParent();\n        }else\n            NewContext = activity;\n    }\n\n    @Override\n    public void onActivityStarted(Activity activity) {\n        if(activity.getParent()!=null){\n            NewContext = activity.getParent();\n        }else\n            NewContext = activity;\n    }\n\n    @Override\n    public void onActivityResumed(Activity activity) {\n        if(activity.getParent()!=null){\n            NewContext = activity.getParent();\n        }else\n            NewContext = activity;\n    }\n\n    @Override\n    public void onActivityPaused(Activity activity) {\n            ToastUtils.getInstanse().cancel();\n    }\n\n    @Override\n    public void onActivityStopped(Activity activity) {\n\n    }\n\n    @Override\n    public void onActivitySaveInstanceState(Activity activity, Bundle outState) {\n    }\n\n    @Override\n    public void onActivityDestroyed(Activity activity) {\n\n    }\n```\n这个NewContext 就是我们的主要东东 记录当前用户停留在哪一个页面 。简单来说就是记录dialog弹出时\n\n应该依赖那个activity.\n\nsoso 为了适配新方法 我们在全局的service中也做了一些小小的改动哦 。不懂怎么写一个全局弹出\n\ndialog的service的童鞋请看这个文章；\n[http://blog.csdn.net/a940659387/article/details/50152561]\n\n\n本撸主还是粘出代码供your 一览吧。\n\n\n```\npublic class CommonDialogService extends Service implements CommonDialogListener{\n\t@Override\n\tpublic IBinder onBind(Intent intent) {\n\t\treturn null;\n\t}\n\t/**this is TV*/\n\tprivate static TextView tv;\n\tprivate static Dialog dialog;\n\t/**判断是否已经new Dialog*/\n\tprivate void showDialog(int iscancle){\n\n\t\tif(dialog==null){\n\t\tdialog = new Dialog(CommonApplication.NewContext, R.style.MyDialogStyle);\n\t\tView view = LayoutInflater.from(this).inflate(R.layout.progressbar_item,\n\t\t\t\tnull);\n\t\tdialog.setContentView(view);\n\t\ttv = (TextView) view.findViewById(R.id.mylaodint_text_id);\n\t\tImageView progressImageView = (ImageView) view\n\t\t\t\t.findViewById(R.id.myloading_image_id);\n\t\tAnimationDrawable animationDrawable = (AnimationDrawable) progressImageView\n\t\t\t\t.getDrawable();\n\t\tanimationDrawable.start();\n//\t\tWindowManager.LayoutParams windows = dialog.getWindow().getAttributes();\n//\t\t\twindows.type=WindowManager.LayoutParams.TYPE_TOAST;\n//\t\t\tdialog.getWindow().setAttributes(windows);\n//\t\tdialog.getWindow().setType(WindowManager.LayoutParams.TYPE_TOAST);\n\t\t\tif(iscancle==1){\n\t\t\t\tdialog.setCanceledOnTouchOutside(true);\n\t\t\t}else{\n\t\t\t\tdialog.setCanceledOnTouchOutside(false);\n\t\t\t}\n\n\t\t\tdialog.setOnKeyListener(new DialogInterface.OnKeyListener() {\n\t\t\t\t@Override\n\t\t\t\tpublic boolean onKey(DialogInterface dialog, int keyCode, KeyEvent event) {\n\t\t\t\t\tdialog.dismiss();\n\t\t\t\t\tdialog=null;\n\t\t\t\t\treturn false;\n\t\t\t\t}\n\t\t\t});\n\t\t\tdialog.setOnDismissListener(new DialogInterface.OnDismissListener() {\n\t\t\t\t@Override\n\t\t\t\tpublic void onDismiss(DialogInterface dialog) {\n\t\t\t\t\tdialog =null;\n\t\t\t\t}\n\t\t\t});\n\t\t}\n\n\t\tif(dialog!=null&&!dialog.isShowing()){\n\t\t\tdialog.show();\n\t\t\tWindowManager.LayoutParams lp = dialog.getWindow()\n\t\t\t\t\t.getAttributes();\n\t\t\tlp.width = ConstantsYiBaiSong.WinWidth/ 3;\n\t\t\tlp.height = LayoutParams.WRAP_CONTENT;\n\t\t\tdialog.getWindow().setAttributes(lp);\n\t\t\t}\n\t\t}\n\t\n\tpublic void onCreate() {\n\t\t/**this将此service与工具类绑定*/\n\t\tToastUtils.getInstanse().setListener(this);\n\t}\n\n\t\n\t/**showDialog*/\n\t@Override\n\tpublic void show() {\n\t\tshowDialog(1);\n\t\tdialog.setCancelable(true);\n\t\ttv.setText(\"请稍后...\");\n\n\t}\n\n\t/**cancleDialog*/\n\t@Override\n\tpublic void cancle() {\n\t\tif(null!=dialog){\n\t\t\tdialog.dismiss();\n\t\t\tdialog = null;\n\t\t}\n\t}\n\n\t/**show have custom Text dialog*/\n\t@Override\n\tpublic void showstr(String str) {\n\t\tshowDialog(1);\n\t\tdialog.setCancelable(true);\n\t\ttv.setText(str);\n\n\t}\n\n\t/**show uncancle's dialog */\n\t@Override\n\tpublic void showunCancle() {\n\t\tshowDialog(2);\n\t\tdialog.setCanceledOnTouchOutside(false);\n\t\tdialog.setCancelable(false);\n\t\ttv.setText(\"请稍后...\");\n\t}\n\n\t@Override\n\tpublic void setStr(String str) {\n\t\tif(dialog==null){\n\t\t\treturn;\n\t\t}\n\t\tif(dialog.isShowing()){\n//\t\t\tLog.e(\"TAG\", \"str====:\" + str);\n\t\t\ttv.setText(str+\"\");\n\t\t}\n\t}\n\n\t@Override\n\tpublic void showDismissListener(final ToastUtils.DisMisCallBack callBack) {\n\t\tif(CommonApplication.NewContext!=null&&dialog==null){\n\t\t\tdialog = new Dialog(CommonApplication.NewContext, R.style.MyDialogStyle);\n\t\t\tView view = LayoutInflater.from(this).inflate(R.layout.progressbar_item,\n\t\t\t\t\tnull);\n\t\t\tdialog.setContentView(view);\n\n\t\t\ttv = (TextView) view.findViewById(R.id.mylaodint_text_id);\n\t\t\tImageView progressImageView = (ImageView) view\n\t\t\t\t\t.findViewById(R.id.myloading_image_id);\n\n\t\t\tAnimationDrawable animationDrawable = (AnimationDrawable) progressImageView\n\t\t\t\t\t.getDrawable();\n\t\t\tanimationDrawable.start();\n\t\t\tdialog.setOnDismissListener(new DialogInterface.OnDismissListener() {\n\t\t\t\t@Override\n\t\t\t\tpublic void onDismiss(DialogInterface dialog) {\n\t\t\t\t\tcallBack.disMisCallBack();\n\t\t\t\t}});\n//\t\tWindowManager.LayoutParams windows = dialog.getWindow().getAttributes();\n//\t\t\twindows.type=WindowManager.LayoutParams.TYPE_TOAST;\n//\t\t\tdialog.getWindow().setAttributes(windows);\n//\t\tdialog.getWindow().setType(WindowManager.LayoutParams.TYPE_TOAST);\n//\t\t\tif(iscancle==1){\n//\t\t\t\tdialog.setCanceledOnTouchOutside(true);\n//\t\t\t}else{\n//\t\t\t\tdialog.setCanceledOnTouchOutside(false);\n//\t\t\t}\n\t\t}\n\t\tdialog.setCanceledOnTouchOutside(false);\n\t\tif(dialog!=null&&!dialog.isShowing()){\n\t\t\tdialog.show();\n\t\t\tWindowManager.LayoutParams lp = dialog.getWindow()\n\t\t\t\t\t.getAttributes();\n\t\t\tlp.width = ConstantsYiBaiSong.WinWidth/ 3;\n\t\t\tlp.height = LayoutParams.WRAP_CONTENT;\n\t\t\tdialog.getWindow().setAttributes(lp);\n\t\t}\n\n\t}\n\n\t;\n\n\t@Override\n\tpublic void onDestroy() {\n\t\tsuper.onDestroy();\n\t\tif(null!=dialog &&dialog.isShowing()){\n\t\t\tdialog.cancel();\n\t\t}\n\t}\n}\n```\n细心的童鞋可能已经发现 有些代码已经被注释了  。  因为么 不注释 6.0就会啪啪啪一直蹦。 you know .\n\n\n话到这里  撸主已经没有太多的话想说了。so女生压底图一张，然后上demo;\n\n![这里写图片描述](http://img.blog.csdn.net/20160909141659424)\n\n\ngit地址：[全局Dialog适配6.0](https://github.com/yudehai0204/ApplicationDialog)\n\n\n","slug":"Android适配6-0，全局Dialog终极解决方案","published":1,"updated":"2017-05-02T08:51:16.773Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cj2pu8ffl00001kwchuza5y00","content":"<p>6.0推出之后，部分手机完全限制了全局Toast弹出类型。so 撸主<br>(<a href=\"http://blog.csdn.net/a940659387/article/details/50152561\" target=\"_blank\" rel=\"external\">http://blog.csdn.net/a940659387/article/details/50152561</a>)<br>这个文章也该光荣退休了。<br><strong>but 想要看这篇文章的童鞋应该先看撸主的前一篇文章，why?  because 你不看辣个就看不懂这个。</strong><br><a id=\"more\"></a></p>\n<h3 id=\"Application-ActivityLifecycleCallbacks\"><a href=\"#Application-ActivityLifecycleCallbacks\" class=\"headerlink\" title=\"Application.ActivityLifecycleCallbacks\"></a>Application.ActivityLifecycleCallbacks</h3><p>顾明思议，肯定是用在Application中的 。 关于不知道怎么配置Application的童鞋可自行谷歌。</p>\n<p>再瞅，带着callback must 是一个接口。  没错  就是一个接口 一个在application中实现用来监听activity</p>\n<p>生命周期触发步骤的东东。</p>\n<h4 id=\"没图说个蛋蛋-先上图片\"><a href=\"#没图说个蛋蛋-先上图片\" class=\"headerlink\" title=\"没图说个蛋蛋 先上图片\"></a>没图说个蛋蛋 先上图片</h4><p><img src=\"http://img.blog.csdn.net/20160909141533953\" alt=\"这里写图片描述\"></p>\n<h4 id=\"方法\"><a href=\"#方法\" class=\"headerlink\" title=\"方法\"></a>方法</h4><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div></pre></td><td class=\"code\"><pre><div class=\"line\">@Override</div><div class=\"line\">  public void onActivityCreated(Activity activity, Bundle savedInstanceState) &#123;</div><div class=\"line\">      if(activity.getParent()!=null)&#123;</div><div class=\"line\">          NewContext = activity.getParent();</div><div class=\"line\">      &#125;else</div><div class=\"line\">          NewContext = activity;</div><div class=\"line\">  &#125;</div><div class=\"line\"></div><div class=\"line\">  @Override</div><div class=\"line\">  public void onActivityStarted(Activity activity) &#123;</div><div class=\"line\">      if(activity.getParent()!=null)&#123;</div><div class=\"line\">          NewContext = activity.getParent();</div><div class=\"line\">      &#125;else</div><div class=\"line\">          NewContext = activity;</div><div class=\"line\">  &#125;</div><div class=\"line\"></div><div class=\"line\">  @Override</div><div class=\"line\">  public void onActivityResumed(Activity activity) &#123;</div><div class=\"line\">      if(activity.getParent()!=null)&#123;</div><div class=\"line\">          NewContext = activity.getParent();</div><div class=\"line\">      &#125;else</div><div class=\"line\">          NewContext = activity;</div><div class=\"line\">  &#125;</div><div class=\"line\"></div><div class=\"line\">  @Override</div><div class=\"line\">  public void onActivityPaused(Activity activity) &#123;</div><div class=\"line\">          ToastUtils.getInstanse().cancel();</div><div class=\"line\">  &#125;</div><div class=\"line\"></div><div class=\"line\">  @Override</div><div class=\"line\">  public void onActivityStopped(Activity activity) &#123;</div><div class=\"line\"></div><div class=\"line\">  &#125;</div><div class=\"line\"></div><div class=\"line\">  @Override</div><div class=\"line\">  public void onActivitySaveInstanceState(Activity activity, Bundle outState) &#123;</div><div class=\"line\">  &#125;</div><div class=\"line\"></div><div class=\"line\">  @Override</div><div class=\"line\">  public void onActivityDestroyed(Activity activity) &#123;</div><div class=\"line\"></div><div class=\"line\">  &#125;</div></pre></td></tr></table></figure>\n<p>这个NewContext 就是我们的主要东东 记录当前用户停留在哪一个页面 。简单来说就是记录dialog弹出时</p>\n<p>应该依赖那个activity.</p>\n<p>soso 为了适配新方法 我们在全局的service中也做了一些小小的改动哦 。不懂怎么写一个全局弹出</p>\n<p>dialog的service的童鞋请看这个文章；<br>[<a href=\"http://blog.csdn.net/a940659387/article/details/50152561\" target=\"_blank\" rel=\"external\">http://blog.csdn.net/a940659387/article/details/50152561</a>]</p>\n<p>本撸主还是粘出代码供your 一览吧。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div><div class=\"line\">45</div><div class=\"line\">46</div><div class=\"line\">47</div><div class=\"line\">48</div><div class=\"line\">49</div><div class=\"line\">50</div><div class=\"line\">51</div><div class=\"line\">52</div><div class=\"line\">53</div><div class=\"line\">54</div><div class=\"line\">55</div><div class=\"line\">56</div><div class=\"line\">57</div><div class=\"line\">58</div><div class=\"line\">59</div><div class=\"line\">60</div><div class=\"line\">61</div><div class=\"line\">62</div><div class=\"line\">63</div><div class=\"line\">64</div><div class=\"line\">65</div><div class=\"line\">66</div><div class=\"line\">67</div><div class=\"line\">68</div><div class=\"line\">69</div><div class=\"line\">70</div><div class=\"line\">71</div><div class=\"line\">72</div><div class=\"line\">73</div><div class=\"line\">74</div><div class=\"line\">75</div><div class=\"line\">76</div><div class=\"line\">77</div><div class=\"line\">78</div><div class=\"line\">79</div><div class=\"line\">80</div><div class=\"line\">81</div><div class=\"line\">82</div><div class=\"line\">83</div><div class=\"line\">84</div><div class=\"line\">85</div><div class=\"line\">86</div><div class=\"line\">87</div><div class=\"line\">88</div><div class=\"line\">89</div><div class=\"line\">90</div><div class=\"line\">91</div><div class=\"line\">92</div><div class=\"line\">93</div><div class=\"line\">94</div><div class=\"line\">95</div><div class=\"line\">96</div><div class=\"line\">97</div><div class=\"line\">98</div><div class=\"line\">99</div><div class=\"line\">100</div><div class=\"line\">101</div><div class=\"line\">102</div><div class=\"line\">103</div><div class=\"line\">104</div><div class=\"line\">105</div><div class=\"line\">106</div><div class=\"line\">107</div><div class=\"line\">108</div><div class=\"line\">109</div><div class=\"line\">110</div><div class=\"line\">111</div><div class=\"line\">112</div><div class=\"line\">113</div><div class=\"line\">114</div><div class=\"line\">115</div><div class=\"line\">116</div><div class=\"line\">117</div><div class=\"line\">118</div><div class=\"line\">119</div><div class=\"line\">120</div><div class=\"line\">121</div><div class=\"line\">122</div><div class=\"line\">123</div><div class=\"line\">124</div><div class=\"line\">125</div><div class=\"line\">126</div><div class=\"line\">127</div><div class=\"line\">128</div><div class=\"line\">129</div><div class=\"line\">130</div><div class=\"line\">131</div><div class=\"line\">132</div><div class=\"line\">133</div><div class=\"line\">134</div><div class=\"line\">135</div><div class=\"line\">136</div><div class=\"line\">137</div><div class=\"line\">138</div><div class=\"line\">139</div><div class=\"line\">140</div><div class=\"line\">141</div><div class=\"line\">142</div><div class=\"line\">143</div><div class=\"line\">144</div><div class=\"line\">145</div><div class=\"line\">146</div><div class=\"line\">147</div><div class=\"line\">148</div><div class=\"line\">149</div><div class=\"line\">150</div><div class=\"line\">151</div><div class=\"line\">152</div><div class=\"line\">153</div><div class=\"line\">154</div><div class=\"line\">155</div><div class=\"line\">156</div><div class=\"line\">157</div><div class=\"line\">158</div><div class=\"line\">159</div><div class=\"line\">160</div><div class=\"line\">161</div><div class=\"line\">162</div><div class=\"line\">163</div></pre></td><td class=\"code\"><pre><div class=\"line\">public class CommonDialogService extends Service implements CommonDialogListener&#123;</div><div class=\"line\">\t@Override</div><div class=\"line\">\tpublic IBinder onBind(Intent intent) &#123;</div><div class=\"line\">\t\treturn null;</div><div class=\"line\">\t&#125;</div><div class=\"line\">\t/**this is TV*/</div><div class=\"line\">\tprivate static TextView tv;</div><div class=\"line\">\tprivate static Dialog dialog;</div><div class=\"line\">\t/**判断是否已经new Dialog*/</div><div class=\"line\">\tprivate void showDialog(int iscancle)&#123;</div><div class=\"line\"></div><div class=\"line\">\t\tif(dialog==null)&#123;</div><div class=\"line\">\t\tdialog = new Dialog(CommonApplication.NewContext, R.style.MyDialogStyle);</div><div class=\"line\">\t\tView view = LayoutInflater.from(this).inflate(R.layout.progressbar_item,</div><div class=\"line\">\t\t\t\tnull);</div><div class=\"line\">\t\tdialog.setContentView(view);</div><div class=\"line\">\t\ttv = (TextView) view.findViewById(R.id.mylaodint_text_id);</div><div class=\"line\">\t\tImageView progressImageView = (ImageView) view</div><div class=\"line\">\t\t\t\t.findViewById(R.id.myloading_image_id);</div><div class=\"line\">\t\tAnimationDrawable animationDrawable = (AnimationDrawable) progressImageView</div><div class=\"line\">\t\t\t\t.getDrawable();</div><div class=\"line\">\t\tanimationDrawable.start();</div><div class=\"line\">//\t\tWindowManager.LayoutParams windows = dialog.getWindow().getAttributes();</div><div class=\"line\">//\t\t\twindows.type=WindowManager.LayoutParams.TYPE_TOAST;</div><div class=\"line\">//\t\t\tdialog.getWindow().setAttributes(windows);</div><div class=\"line\">//\t\tdialog.getWindow().setType(WindowManager.LayoutParams.TYPE_TOAST);</div><div class=\"line\">\t\t\tif(iscancle==1)&#123;</div><div class=\"line\">\t\t\t\tdialog.setCanceledOnTouchOutside(true);</div><div class=\"line\">\t\t\t&#125;else&#123;</div><div class=\"line\">\t\t\t\tdialog.setCanceledOnTouchOutside(false);</div><div class=\"line\">\t\t\t&#125;</div><div class=\"line\"></div><div class=\"line\">\t\t\tdialog.setOnKeyListener(new DialogInterface.OnKeyListener() &#123;</div><div class=\"line\">\t\t\t\t@Override</div><div class=\"line\">\t\t\t\tpublic boolean onKey(DialogInterface dialog, int keyCode, KeyEvent event) &#123;</div><div class=\"line\">\t\t\t\t\tdialog.dismiss();</div><div class=\"line\">\t\t\t\t\tdialog=null;</div><div class=\"line\">\t\t\t\t\treturn false;</div><div class=\"line\">\t\t\t\t&#125;</div><div class=\"line\">\t\t\t&#125;);</div><div class=\"line\">\t\t\tdialog.setOnDismissListener(new DialogInterface.OnDismissListener() &#123;</div><div class=\"line\">\t\t\t\t@Override</div><div class=\"line\">\t\t\t\tpublic void onDismiss(DialogInterface dialog) &#123;</div><div class=\"line\">\t\t\t\t\tdialog =null;</div><div class=\"line\">\t\t\t\t&#125;</div><div class=\"line\">\t\t\t&#125;);</div><div class=\"line\">\t\t&#125;</div><div class=\"line\"></div><div class=\"line\">\t\tif(dialog!=null&amp;&amp;!dialog.isShowing())&#123;</div><div class=\"line\">\t\t\tdialog.show();</div><div class=\"line\">\t\t\tWindowManager.LayoutParams lp = dialog.getWindow()</div><div class=\"line\">\t\t\t\t\t.getAttributes();</div><div class=\"line\">\t\t\tlp.width = ConstantsYiBaiSong.WinWidth/ 3;</div><div class=\"line\">\t\t\tlp.height = LayoutParams.WRAP_CONTENT;</div><div class=\"line\">\t\t\tdialog.getWindow().setAttributes(lp);</div><div class=\"line\">\t\t\t&#125;</div><div class=\"line\">\t\t&#125;</div><div class=\"line\">\t</div><div class=\"line\">\tpublic void onCreate() &#123;</div><div class=\"line\">\t\t/**this将此service与工具类绑定*/</div><div class=\"line\">\t\tToastUtils.getInstanse().setListener(this);</div><div class=\"line\">\t&#125;</div><div class=\"line\"></div><div class=\"line\">\t</div><div class=\"line\">\t/**showDialog*/</div><div class=\"line\">\t@Override</div><div class=\"line\">\tpublic void show() &#123;</div><div class=\"line\">\t\tshowDialog(1);</div><div class=\"line\">\t\tdialog.setCancelable(true);</div><div class=\"line\">\t\ttv.setText(&quot;请稍后...&quot;);</div><div class=\"line\"></div><div class=\"line\">\t&#125;</div><div class=\"line\"></div><div class=\"line\">\t/**cancleDialog*/</div><div class=\"line\">\t@Override</div><div class=\"line\">\tpublic void cancle() &#123;</div><div class=\"line\">\t\tif(null!=dialog)&#123;</div><div class=\"line\">\t\t\tdialog.dismiss();</div><div class=\"line\">\t\t\tdialog = null;</div><div class=\"line\">\t\t&#125;</div><div class=\"line\">\t&#125;</div><div class=\"line\"></div><div class=\"line\">\t/**show have custom Text dialog*/</div><div class=\"line\">\t@Override</div><div class=\"line\">\tpublic void showstr(String str) &#123;</div><div class=\"line\">\t\tshowDialog(1);</div><div class=\"line\">\t\tdialog.setCancelable(true);</div><div class=\"line\">\t\ttv.setText(str);</div><div class=\"line\"></div><div class=\"line\">\t&#125;</div><div class=\"line\"></div><div class=\"line\">\t/**show uncancle&apos;s dialog */</div><div class=\"line\">\t@Override</div><div class=\"line\">\tpublic void showunCancle() &#123;</div><div class=\"line\">\t\tshowDialog(2);</div><div class=\"line\">\t\tdialog.setCanceledOnTouchOutside(false);</div><div class=\"line\">\t\tdialog.setCancelable(false);</div><div class=\"line\">\t\ttv.setText(&quot;请稍后...&quot;);</div><div class=\"line\">\t&#125;</div><div class=\"line\"></div><div class=\"line\">\t@Override</div><div class=\"line\">\tpublic void setStr(String str) &#123;</div><div class=\"line\">\t\tif(dialog==null)&#123;</div><div class=\"line\">\t\t\treturn;</div><div class=\"line\">\t\t&#125;</div><div class=\"line\">\t\tif(dialog.isShowing())&#123;</div><div class=\"line\">//\t\t\tLog.e(&quot;TAG&quot;, &quot;str====:&quot; + str);</div><div class=\"line\">\t\t\ttv.setText(str+&quot;&quot;);</div><div class=\"line\">\t\t&#125;</div><div class=\"line\">\t&#125;</div><div class=\"line\"></div><div class=\"line\">\t@Override</div><div class=\"line\">\tpublic void showDismissListener(final ToastUtils.DisMisCallBack callBack) &#123;</div><div class=\"line\">\t\tif(CommonApplication.NewContext!=null&amp;&amp;dialog==null)&#123;</div><div class=\"line\">\t\t\tdialog = new Dialog(CommonApplication.NewContext, R.style.MyDialogStyle);</div><div class=\"line\">\t\t\tView view = LayoutInflater.from(this).inflate(R.layout.progressbar_item,</div><div class=\"line\">\t\t\t\t\tnull);</div><div class=\"line\">\t\t\tdialog.setContentView(view);</div><div class=\"line\"></div><div class=\"line\">\t\t\ttv = (TextView) view.findViewById(R.id.mylaodint_text_id);</div><div class=\"line\">\t\t\tImageView progressImageView = (ImageView) view</div><div class=\"line\">\t\t\t\t\t.findViewById(R.id.myloading_image_id);</div><div class=\"line\"></div><div class=\"line\">\t\t\tAnimationDrawable animationDrawable = (AnimationDrawable) progressImageView</div><div class=\"line\">\t\t\t\t\t.getDrawable();</div><div class=\"line\">\t\t\tanimationDrawable.start();</div><div class=\"line\">\t\t\tdialog.setOnDismissListener(new DialogInterface.OnDismissListener() &#123;</div><div class=\"line\">\t\t\t\t@Override</div><div class=\"line\">\t\t\t\tpublic void onDismiss(DialogInterface dialog) &#123;</div><div class=\"line\">\t\t\t\t\tcallBack.disMisCallBack();</div><div class=\"line\">\t\t\t\t&#125;&#125;);</div><div class=\"line\">//\t\tWindowManager.LayoutParams windows = dialog.getWindow().getAttributes();</div><div class=\"line\">//\t\t\twindows.type=WindowManager.LayoutParams.TYPE_TOAST;</div><div class=\"line\">//\t\t\tdialog.getWindow().setAttributes(windows);</div><div class=\"line\">//\t\tdialog.getWindow().setType(WindowManager.LayoutParams.TYPE_TOAST);</div><div class=\"line\">//\t\t\tif(iscancle==1)&#123;</div><div class=\"line\">//\t\t\t\tdialog.setCanceledOnTouchOutside(true);</div><div class=\"line\">//\t\t\t&#125;else&#123;</div><div class=\"line\">//\t\t\t\tdialog.setCanceledOnTouchOutside(false);</div><div class=\"line\">//\t\t\t&#125;</div><div class=\"line\">\t\t&#125;</div><div class=\"line\">\t\tdialog.setCanceledOnTouchOutside(false);</div><div class=\"line\">\t\tif(dialog!=null&amp;&amp;!dialog.isShowing())&#123;</div><div class=\"line\">\t\t\tdialog.show();</div><div class=\"line\">\t\t\tWindowManager.LayoutParams lp = dialog.getWindow()</div><div class=\"line\">\t\t\t\t\t.getAttributes();</div><div class=\"line\">\t\t\tlp.width = ConstantsYiBaiSong.WinWidth/ 3;</div><div class=\"line\">\t\t\tlp.height = LayoutParams.WRAP_CONTENT;</div><div class=\"line\">\t\t\tdialog.getWindow().setAttributes(lp);</div><div class=\"line\">\t\t&#125;</div><div class=\"line\"></div><div class=\"line\">\t&#125;</div><div class=\"line\"></div><div class=\"line\">\t;</div><div class=\"line\"></div><div class=\"line\">\t@Override</div><div class=\"line\">\tpublic void onDestroy() &#123;</div><div class=\"line\">\t\tsuper.onDestroy();</div><div class=\"line\">\t\tif(null!=dialog &amp;&amp;dialog.isShowing())&#123;</div><div class=\"line\">\t\t\tdialog.cancel();</div><div class=\"line\">\t\t&#125;</div><div class=\"line\">\t&#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>细心的童鞋可能已经发现 有些代码已经被注释了  。  因为么 不注释 6.0就会啪啪啪一直蹦。 you know .</p>\n<p>话到这里  撸主已经没有太多的话想说了。so女生压底图一张，然后上demo;</p>\n<p><img src=\"http://img.blog.csdn.net/20160909141659424\" alt=\"这里写图片描述\"></p>\n<p>git地址：<a href=\"https://github.com/yudehai0204/ApplicationDialog\" target=\"_blank\" rel=\"external\">全局Dialog适配6.0</a></p>\n","site":{"data":{}},"excerpt":"<p>6.0推出之后，部分手机完全限制了全局Toast弹出类型。so 撸主<br>(<a href=\"http://blog.csdn.net/a940659387/article/details/50152561\">http://blog.csdn.net/a940659387/article/details/50152561</a>)<br>这个文章也该光荣退休了。<br><strong>but 想要看这篇文章的童鞋应该先看撸主的前一篇文章，why?  because 你不看辣个就看不懂这个。</strong><br>","more":"</p>\n<h3 id=\"Application-ActivityLifecycleCallbacks\"><a href=\"#Application-ActivityLifecycleCallbacks\" class=\"headerlink\" title=\"Application.ActivityLifecycleCallbacks\"></a>Application.ActivityLifecycleCallbacks</h3><p>顾明思议，肯定是用在Application中的 。 关于不知道怎么配置Application的童鞋可自行谷歌。</p>\n<p>再瞅，带着callback must 是一个接口。  没错  就是一个接口 一个在application中实现用来监听activity</p>\n<p>生命周期触发步骤的东东。</p>\n<h4 id=\"没图说个蛋蛋-先上图片\"><a href=\"#没图说个蛋蛋-先上图片\" class=\"headerlink\" title=\"没图说个蛋蛋 先上图片\"></a>没图说个蛋蛋 先上图片</h4><p><img src=\"http://img.blog.csdn.net/20160909141533953\" alt=\"这里写图片描述\"></p>\n<h4 id=\"方法\"><a href=\"#方法\" class=\"headerlink\" title=\"方法\"></a>方法</h4><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div></pre></td><td class=\"code\"><pre><div class=\"line\">@Override</div><div class=\"line\">  public void onActivityCreated(Activity activity, Bundle savedInstanceState) &#123;</div><div class=\"line\">      if(activity.getParent()!=null)&#123;</div><div class=\"line\">          NewContext = activity.getParent();</div><div class=\"line\">      &#125;else</div><div class=\"line\">          NewContext = activity;</div><div class=\"line\">  &#125;</div><div class=\"line\"></div><div class=\"line\">  @Override</div><div class=\"line\">  public void onActivityStarted(Activity activity) &#123;</div><div class=\"line\">      if(activity.getParent()!=null)&#123;</div><div class=\"line\">          NewContext = activity.getParent();</div><div class=\"line\">      &#125;else</div><div class=\"line\">          NewContext = activity;</div><div class=\"line\">  &#125;</div><div class=\"line\"></div><div class=\"line\">  @Override</div><div class=\"line\">  public void onActivityResumed(Activity activity) &#123;</div><div class=\"line\">      if(activity.getParent()!=null)&#123;</div><div class=\"line\">          NewContext = activity.getParent();</div><div class=\"line\">      &#125;else</div><div class=\"line\">          NewContext = activity;</div><div class=\"line\">  &#125;</div><div class=\"line\"></div><div class=\"line\">  @Override</div><div class=\"line\">  public void onActivityPaused(Activity activity) &#123;</div><div class=\"line\">          ToastUtils.getInstanse().cancel();</div><div class=\"line\">  &#125;</div><div class=\"line\"></div><div class=\"line\">  @Override</div><div class=\"line\">  public void onActivityStopped(Activity activity) &#123;</div><div class=\"line\"></div><div class=\"line\">  &#125;</div><div class=\"line\"></div><div class=\"line\">  @Override</div><div class=\"line\">  public void onActivitySaveInstanceState(Activity activity, Bundle outState) &#123;</div><div class=\"line\">  &#125;</div><div class=\"line\"></div><div class=\"line\">  @Override</div><div class=\"line\">  public void onActivityDestroyed(Activity activity) &#123;</div><div class=\"line\"></div><div class=\"line\">  &#125;</div></pre></td></tr></table></figure>\n<p>这个NewContext 就是我们的主要东东 记录当前用户停留在哪一个页面 。简单来说就是记录dialog弹出时</p>\n<p>应该依赖那个activity.</p>\n<p>soso 为了适配新方法 我们在全局的service中也做了一些小小的改动哦 。不懂怎么写一个全局弹出</p>\n<p>dialog的service的童鞋请看这个文章；<br>[<a href=\"http://blog.csdn.net/a940659387/article/details/50152561\">http://blog.csdn.net/a940659387/article/details/50152561</a>]</p>\n<p>本撸主还是粘出代码供your 一览吧。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div><div class=\"line\">45</div><div class=\"line\">46</div><div class=\"line\">47</div><div class=\"line\">48</div><div class=\"line\">49</div><div class=\"line\">50</div><div class=\"line\">51</div><div class=\"line\">52</div><div class=\"line\">53</div><div class=\"line\">54</div><div class=\"line\">55</div><div class=\"line\">56</div><div class=\"line\">57</div><div class=\"line\">58</div><div class=\"line\">59</div><div class=\"line\">60</div><div class=\"line\">61</div><div class=\"line\">62</div><div class=\"line\">63</div><div class=\"line\">64</div><div class=\"line\">65</div><div class=\"line\">66</div><div class=\"line\">67</div><div class=\"line\">68</div><div class=\"line\">69</div><div class=\"line\">70</div><div class=\"line\">71</div><div class=\"line\">72</div><div class=\"line\">73</div><div class=\"line\">74</div><div class=\"line\">75</div><div class=\"line\">76</div><div class=\"line\">77</div><div class=\"line\">78</div><div class=\"line\">79</div><div class=\"line\">80</div><div class=\"line\">81</div><div class=\"line\">82</div><div class=\"line\">83</div><div class=\"line\">84</div><div class=\"line\">85</div><div class=\"line\">86</div><div class=\"line\">87</div><div class=\"line\">88</div><div class=\"line\">89</div><div class=\"line\">90</div><div class=\"line\">91</div><div class=\"line\">92</div><div class=\"line\">93</div><div class=\"line\">94</div><div class=\"line\">95</div><div class=\"line\">96</div><div class=\"line\">97</div><div class=\"line\">98</div><div class=\"line\">99</div><div class=\"line\">100</div><div class=\"line\">101</div><div class=\"line\">102</div><div class=\"line\">103</div><div class=\"line\">104</div><div class=\"line\">105</div><div class=\"line\">106</div><div class=\"line\">107</div><div class=\"line\">108</div><div class=\"line\">109</div><div class=\"line\">110</div><div class=\"line\">111</div><div class=\"line\">112</div><div class=\"line\">113</div><div class=\"line\">114</div><div class=\"line\">115</div><div class=\"line\">116</div><div class=\"line\">117</div><div class=\"line\">118</div><div class=\"line\">119</div><div class=\"line\">120</div><div class=\"line\">121</div><div class=\"line\">122</div><div class=\"line\">123</div><div class=\"line\">124</div><div class=\"line\">125</div><div class=\"line\">126</div><div class=\"line\">127</div><div class=\"line\">128</div><div class=\"line\">129</div><div class=\"line\">130</div><div class=\"line\">131</div><div class=\"line\">132</div><div class=\"line\">133</div><div class=\"line\">134</div><div class=\"line\">135</div><div class=\"line\">136</div><div class=\"line\">137</div><div class=\"line\">138</div><div class=\"line\">139</div><div class=\"line\">140</div><div class=\"line\">141</div><div class=\"line\">142</div><div class=\"line\">143</div><div class=\"line\">144</div><div class=\"line\">145</div><div class=\"line\">146</div><div class=\"line\">147</div><div class=\"line\">148</div><div class=\"line\">149</div><div class=\"line\">150</div><div class=\"line\">151</div><div class=\"line\">152</div><div class=\"line\">153</div><div class=\"line\">154</div><div class=\"line\">155</div><div class=\"line\">156</div><div class=\"line\">157</div><div class=\"line\">158</div><div class=\"line\">159</div><div class=\"line\">160</div><div class=\"line\">161</div><div class=\"line\">162</div><div class=\"line\">163</div></pre></td><td class=\"code\"><pre><div class=\"line\">public class CommonDialogService extends Service implements CommonDialogListener&#123;</div><div class=\"line\">\t@Override</div><div class=\"line\">\tpublic IBinder onBind(Intent intent) &#123;</div><div class=\"line\">\t\treturn null;</div><div class=\"line\">\t&#125;</div><div class=\"line\">\t/**this is TV*/</div><div class=\"line\">\tprivate static TextView tv;</div><div class=\"line\">\tprivate static Dialog dialog;</div><div class=\"line\">\t/**判断是否已经new Dialog*/</div><div class=\"line\">\tprivate void showDialog(int iscancle)&#123;</div><div class=\"line\"></div><div class=\"line\">\t\tif(dialog==null)&#123;</div><div class=\"line\">\t\tdialog = new Dialog(CommonApplication.NewContext, R.style.MyDialogStyle);</div><div class=\"line\">\t\tView view = LayoutInflater.from(this).inflate(R.layout.progressbar_item,</div><div class=\"line\">\t\t\t\tnull);</div><div class=\"line\">\t\tdialog.setContentView(view);</div><div class=\"line\">\t\ttv = (TextView) view.findViewById(R.id.mylaodint_text_id);</div><div class=\"line\">\t\tImageView progressImageView = (ImageView) view</div><div class=\"line\">\t\t\t\t.findViewById(R.id.myloading_image_id);</div><div class=\"line\">\t\tAnimationDrawable animationDrawable = (AnimationDrawable) progressImageView</div><div class=\"line\">\t\t\t\t.getDrawable();</div><div class=\"line\">\t\tanimationDrawable.start();</div><div class=\"line\">//\t\tWindowManager.LayoutParams windows = dialog.getWindow().getAttributes();</div><div class=\"line\">//\t\t\twindows.type=WindowManager.LayoutParams.TYPE_TOAST;</div><div class=\"line\">//\t\t\tdialog.getWindow().setAttributes(windows);</div><div class=\"line\">//\t\tdialog.getWindow().setType(WindowManager.LayoutParams.TYPE_TOAST);</div><div class=\"line\">\t\t\tif(iscancle==1)&#123;</div><div class=\"line\">\t\t\t\tdialog.setCanceledOnTouchOutside(true);</div><div class=\"line\">\t\t\t&#125;else&#123;</div><div class=\"line\">\t\t\t\tdialog.setCanceledOnTouchOutside(false);</div><div class=\"line\">\t\t\t&#125;</div><div class=\"line\"></div><div class=\"line\">\t\t\tdialog.setOnKeyListener(new DialogInterface.OnKeyListener() &#123;</div><div class=\"line\">\t\t\t\t@Override</div><div class=\"line\">\t\t\t\tpublic boolean onKey(DialogInterface dialog, int keyCode, KeyEvent event) &#123;</div><div class=\"line\">\t\t\t\t\tdialog.dismiss();</div><div class=\"line\">\t\t\t\t\tdialog=null;</div><div class=\"line\">\t\t\t\t\treturn false;</div><div class=\"line\">\t\t\t\t&#125;</div><div class=\"line\">\t\t\t&#125;);</div><div class=\"line\">\t\t\tdialog.setOnDismissListener(new DialogInterface.OnDismissListener() &#123;</div><div class=\"line\">\t\t\t\t@Override</div><div class=\"line\">\t\t\t\tpublic void onDismiss(DialogInterface dialog) &#123;</div><div class=\"line\">\t\t\t\t\tdialog =null;</div><div class=\"line\">\t\t\t\t&#125;</div><div class=\"line\">\t\t\t&#125;);</div><div class=\"line\">\t\t&#125;</div><div class=\"line\"></div><div class=\"line\">\t\tif(dialog!=null&amp;&amp;!dialog.isShowing())&#123;</div><div class=\"line\">\t\t\tdialog.show();</div><div class=\"line\">\t\t\tWindowManager.LayoutParams lp = dialog.getWindow()</div><div class=\"line\">\t\t\t\t\t.getAttributes();</div><div class=\"line\">\t\t\tlp.width = ConstantsYiBaiSong.WinWidth/ 3;</div><div class=\"line\">\t\t\tlp.height = LayoutParams.WRAP_CONTENT;</div><div class=\"line\">\t\t\tdialog.getWindow().setAttributes(lp);</div><div class=\"line\">\t\t\t&#125;</div><div class=\"line\">\t\t&#125;</div><div class=\"line\">\t</div><div class=\"line\">\tpublic void onCreate() &#123;</div><div class=\"line\">\t\t/**this将此service与工具类绑定*/</div><div class=\"line\">\t\tToastUtils.getInstanse().setListener(this);</div><div class=\"line\">\t&#125;</div><div class=\"line\"></div><div class=\"line\">\t</div><div class=\"line\">\t/**showDialog*/</div><div class=\"line\">\t@Override</div><div class=\"line\">\tpublic void show() &#123;</div><div class=\"line\">\t\tshowDialog(1);</div><div class=\"line\">\t\tdialog.setCancelable(true);</div><div class=\"line\">\t\ttv.setText(&quot;请稍后...&quot;);</div><div class=\"line\"></div><div class=\"line\">\t&#125;</div><div class=\"line\"></div><div class=\"line\">\t/**cancleDialog*/</div><div class=\"line\">\t@Override</div><div class=\"line\">\tpublic void cancle() &#123;</div><div class=\"line\">\t\tif(null!=dialog)&#123;</div><div class=\"line\">\t\t\tdialog.dismiss();</div><div class=\"line\">\t\t\tdialog = null;</div><div class=\"line\">\t\t&#125;</div><div class=\"line\">\t&#125;</div><div class=\"line\"></div><div class=\"line\">\t/**show have custom Text dialog*/</div><div class=\"line\">\t@Override</div><div class=\"line\">\tpublic void showstr(String str) &#123;</div><div class=\"line\">\t\tshowDialog(1);</div><div class=\"line\">\t\tdialog.setCancelable(true);</div><div class=\"line\">\t\ttv.setText(str);</div><div class=\"line\"></div><div class=\"line\">\t&#125;</div><div class=\"line\"></div><div class=\"line\">\t/**show uncancle&apos;s dialog */</div><div class=\"line\">\t@Override</div><div class=\"line\">\tpublic void showunCancle() &#123;</div><div class=\"line\">\t\tshowDialog(2);</div><div class=\"line\">\t\tdialog.setCanceledOnTouchOutside(false);</div><div class=\"line\">\t\tdialog.setCancelable(false);</div><div class=\"line\">\t\ttv.setText(&quot;请稍后...&quot;);</div><div class=\"line\">\t&#125;</div><div class=\"line\"></div><div class=\"line\">\t@Override</div><div class=\"line\">\tpublic void setStr(String str) &#123;</div><div class=\"line\">\t\tif(dialog==null)&#123;</div><div class=\"line\">\t\t\treturn;</div><div class=\"line\">\t\t&#125;</div><div class=\"line\">\t\tif(dialog.isShowing())&#123;</div><div class=\"line\">//\t\t\tLog.e(&quot;TAG&quot;, &quot;str====:&quot; + str);</div><div class=\"line\">\t\t\ttv.setText(str+&quot;&quot;);</div><div class=\"line\">\t\t&#125;</div><div class=\"line\">\t&#125;</div><div class=\"line\"></div><div class=\"line\">\t@Override</div><div class=\"line\">\tpublic void showDismissListener(final ToastUtils.DisMisCallBack callBack) &#123;</div><div class=\"line\">\t\tif(CommonApplication.NewContext!=null&amp;&amp;dialog==null)&#123;</div><div class=\"line\">\t\t\tdialog = new Dialog(CommonApplication.NewContext, R.style.MyDialogStyle);</div><div class=\"line\">\t\t\tView view = LayoutInflater.from(this).inflate(R.layout.progressbar_item,</div><div class=\"line\">\t\t\t\t\tnull);</div><div class=\"line\">\t\t\tdialog.setContentView(view);</div><div class=\"line\"></div><div class=\"line\">\t\t\ttv = (TextView) view.findViewById(R.id.mylaodint_text_id);</div><div class=\"line\">\t\t\tImageView progressImageView = (ImageView) view</div><div class=\"line\">\t\t\t\t\t.findViewById(R.id.myloading_image_id);</div><div class=\"line\"></div><div class=\"line\">\t\t\tAnimationDrawable animationDrawable = (AnimationDrawable) progressImageView</div><div class=\"line\">\t\t\t\t\t.getDrawable();</div><div class=\"line\">\t\t\tanimationDrawable.start();</div><div class=\"line\">\t\t\tdialog.setOnDismissListener(new DialogInterface.OnDismissListener() &#123;</div><div class=\"line\">\t\t\t\t@Override</div><div class=\"line\">\t\t\t\tpublic void onDismiss(DialogInterface dialog) &#123;</div><div class=\"line\">\t\t\t\t\tcallBack.disMisCallBack();</div><div class=\"line\">\t\t\t\t&#125;&#125;);</div><div class=\"line\">//\t\tWindowManager.LayoutParams windows = dialog.getWindow().getAttributes();</div><div class=\"line\">//\t\t\twindows.type=WindowManager.LayoutParams.TYPE_TOAST;</div><div class=\"line\">//\t\t\tdialog.getWindow().setAttributes(windows);</div><div class=\"line\">//\t\tdialog.getWindow().setType(WindowManager.LayoutParams.TYPE_TOAST);</div><div class=\"line\">//\t\t\tif(iscancle==1)&#123;</div><div class=\"line\">//\t\t\t\tdialog.setCanceledOnTouchOutside(true);</div><div class=\"line\">//\t\t\t&#125;else&#123;</div><div class=\"line\">//\t\t\t\tdialog.setCanceledOnTouchOutside(false);</div><div class=\"line\">//\t\t\t&#125;</div><div class=\"line\">\t\t&#125;</div><div class=\"line\">\t\tdialog.setCanceledOnTouchOutside(false);</div><div class=\"line\">\t\tif(dialog!=null&amp;&amp;!dialog.isShowing())&#123;</div><div class=\"line\">\t\t\tdialog.show();</div><div class=\"line\">\t\t\tWindowManager.LayoutParams lp = dialog.getWindow()</div><div class=\"line\">\t\t\t\t\t.getAttributes();</div><div class=\"line\">\t\t\tlp.width = ConstantsYiBaiSong.WinWidth/ 3;</div><div class=\"line\">\t\t\tlp.height = LayoutParams.WRAP_CONTENT;</div><div class=\"line\">\t\t\tdialog.getWindow().setAttributes(lp);</div><div class=\"line\">\t\t&#125;</div><div class=\"line\"></div><div class=\"line\">\t&#125;</div><div class=\"line\"></div><div class=\"line\">\t;</div><div class=\"line\"></div><div class=\"line\">\t@Override</div><div class=\"line\">\tpublic void onDestroy() &#123;</div><div class=\"line\">\t\tsuper.onDestroy();</div><div class=\"line\">\t\tif(null!=dialog &amp;&amp;dialog.isShowing())&#123;</div><div class=\"line\">\t\t\tdialog.cancel();</div><div class=\"line\">\t\t&#125;</div><div class=\"line\">\t&#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>细心的童鞋可能已经发现 有些代码已经被注释了  。  因为么 不注释 6.0就会啪啪啪一直蹦。 you know .</p>\n<p>话到这里  撸主已经没有太多的话想说了。so女生压底图一张，然后上demo;</p>\n<p><img src=\"http://img.blog.csdn.net/20160909141659424\" alt=\"这里写图片描述\"></p>\n<p>git地址：<a href=\"https://github.com/yudehai0204/ApplicationDialog\">全局Dialog适配6.0</a></p>"},{"title":"Activity销毁时如何保存Fragment状态","date":"2017-04-25T11:25:23.000Z","_content":"转载请标明出处： \nhttp://blog.csdn.net/a940659387/article/details/50730076\n\n原文：http://emuneee.com/blog/2013/01/07/saving-fragment-states/\n在Android 3.0(SDK 11)以后，Android 出现了一个伟大的功能：如何在你的App中保存和还原你的Framgent数据。\n<!-- more -->\n### 它是什么 ###\n\n\t我再我下一个App开发中期的时候参考Android API时,偶然发现  FragmentManager.putFragment(Bundle, String, Fragment) and FragmentManager.getFragment(Bundle, String) 这两个方法。它们的作用？\n\t\n\tputFragment\n将一个Fragment的引用传递到Bundle中。这个Bundle可以一直保存它的数据，以后通过调用\n\t[getFragment(Bundle, String)](http://developer.android.com/reference/android/app/FragmentManager.html#getFragment%28android.os.Bundle,%20java.lang.String%29)方法得到一个一样的Fragmet 实例。\n\n\tgetFragment\n\n取回一个先前通过 [putFragment(Bundle, String, Fragment)](http://developer.android.com/reference/android/app/FragmentManager.html#putFragment%28android.os.Bundle,%20java.lang.String,%20android.app.Fragment%29).方法存储的fragment实例。\n\n\t根据我的理解，当你把当前的Fragment放置到bundle中，他会保存一个的指针指向这个fragment的地址;当你调用getFragment()方法时，它将返回你通过putFragment保存的指针对应的Fragment实例。\n\n\n你也可以通过使用FramgentManager APIs 去保存一个fragment 对应的指针（我感觉叫引用更好） 到bundle中 在以后用到时取出。它也允许你实现这个指针的存储跟取出（还原）。 \n\n\t\t---Diane Hackborn ,Android 架构师。  [Source](https://groups.google.com/forum/?fromgroups=#!topic/android-developers/NBlMJnMaGbo)\n\n### 如何去使用它 ###\n一个使用这个API的方法是在我的这个Acticity的创建和销毁的时候。自fragment出现以来，我通常用两个Activity来使用它，一个是我的activity,另一个用来设置Fragment。我再我的activity中管理fragment.\n\n**putFragment**\n\n\t在activity的 onSaveInstanceState 像这样使用：\n\n```\n\n@Override\nprotected void onSaveInstanceState(Bundle outState) {\n   FragmentManager manager = getFragmentManager();\n   manager.putFragment(outState, MyFragment.TAG, mMyFragment);\n}\n\n```\nMyFragment 是一个在我应用中创建的Fragment，这个bundle,outState,只是一个简单的bunlde,它将存储你fragment(即MyFragment)对应的引用（指针）。 MyFragment.TAG 是你的fragment指针以后会用到的key值。\n\n**GetFragment**\n\n我有一个自定义方法（instantiateFragments） ，它会做一到两件事情：当我的应用是冷启动时抓取我的fragment实例 或者 获得现在的MyFragment内容。\n\n```\nprivate void instantiateFragments(Bundle inState) {\n   FragmentManager manager = getFragmentManager();\n   FragmentTransaction transaction = manager.beginTransaction();\n\n   if (inState != null) {\n      mMyFragment = (MyFragment) manager.getFragment(inState, MyFragment.TAG);\n   } else {\n      mMyFragment = new MyFragment();\n      transaction.add(R.id.fragment, mMyFragment, MyFragment.TAG);\n      transaction.commit();\n   }\n}\n```\n\n我在我的activity中调用instantiateFragments 这个方法，onRestoreInstanceState传入的参数为null时（onCreate 方法通过冷启动触发），当通过热启动触发时，传入的参数为bundle.\n\n```\n@Override\nprotected void onRestoreInstanceState(Bundle inState) {\n   instantiateFragments(inState);\n}\n```\n\n当用户旋转设备时，Android 将销毁Activity,并在销毁前触发onSaveInstanceState，允许开发者来\n保存数据。一旦activity被重新启动，这个OS 将触发onRestoreInstanceState 恢复开发者旋转前的保存的状态。\n\n我鼓励你继续更深调查Android框架。因为所有类型都有细微的差别,他们将简化Android应用程序开发工作。\n\n\n\n\t","source":"_posts/Activity销毁时如何保存Fragment状态.md","raw":"---\ntitle: Activity销毁时如何保存Fragment状态\ndate: 2017-04-25 19:25:23\ntags: \n---\n转载请标明出处： \nhttp://blog.csdn.net/a940659387/article/details/50730076\n\n原文：http://emuneee.com/blog/2013/01/07/saving-fragment-states/\n在Android 3.0(SDK 11)以后，Android 出现了一个伟大的功能：如何在你的App中保存和还原你的Framgent数据。\n<!-- more -->\n### 它是什么 ###\n\n\t我再我下一个App开发中期的时候参考Android API时,偶然发现  FragmentManager.putFragment(Bundle, String, Fragment) and FragmentManager.getFragment(Bundle, String) 这两个方法。它们的作用？\n\t\n\tputFragment\n将一个Fragment的引用传递到Bundle中。这个Bundle可以一直保存它的数据，以后通过调用\n\t[getFragment(Bundle, String)](http://developer.android.com/reference/android/app/FragmentManager.html#getFragment%28android.os.Bundle,%20java.lang.String%29)方法得到一个一样的Fragmet 实例。\n\n\tgetFragment\n\n取回一个先前通过 [putFragment(Bundle, String, Fragment)](http://developer.android.com/reference/android/app/FragmentManager.html#putFragment%28android.os.Bundle,%20java.lang.String,%20android.app.Fragment%29).方法存储的fragment实例。\n\n\t根据我的理解，当你把当前的Fragment放置到bundle中，他会保存一个的指针指向这个fragment的地址;当你调用getFragment()方法时，它将返回你通过putFragment保存的指针对应的Fragment实例。\n\n\n你也可以通过使用FramgentManager APIs 去保存一个fragment 对应的指针（我感觉叫引用更好） 到bundle中 在以后用到时取出。它也允许你实现这个指针的存储跟取出（还原）。 \n\n\t\t---Diane Hackborn ,Android 架构师。  [Source](https://groups.google.com/forum/?fromgroups=#!topic/android-developers/NBlMJnMaGbo)\n\n### 如何去使用它 ###\n一个使用这个API的方法是在我的这个Acticity的创建和销毁的时候。自fragment出现以来，我通常用两个Activity来使用它，一个是我的activity,另一个用来设置Fragment。我再我的activity中管理fragment.\n\n**putFragment**\n\n\t在activity的 onSaveInstanceState 像这样使用：\n\n```\n\n@Override\nprotected void onSaveInstanceState(Bundle outState) {\n   FragmentManager manager = getFragmentManager();\n   manager.putFragment(outState, MyFragment.TAG, mMyFragment);\n}\n\n```\nMyFragment 是一个在我应用中创建的Fragment，这个bundle,outState,只是一个简单的bunlde,它将存储你fragment(即MyFragment)对应的引用（指针）。 MyFragment.TAG 是你的fragment指针以后会用到的key值。\n\n**GetFragment**\n\n我有一个自定义方法（instantiateFragments） ，它会做一到两件事情：当我的应用是冷启动时抓取我的fragment实例 或者 获得现在的MyFragment内容。\n\n```\nprivate void instantiateFragments(Bundle inState) {\n   FragmentManager manager = getFragmentManager();\n   FragmentTransaction transaction = manager.beginTransaction();\n\n   if (inState != null) {\n      mMyFragment = (MyFragment) manager.getFragment(inState, MyFragment.TAG);\n   } else {\n      mMyFragment = new MyFragment();\n      transaction.add(R.id.fragment, mMyFragment, MyFragment.TAG);\n      transaction.commit();\n   }\n}\n```\n\n我在我的activity中调用instantiateFragments 这个方法，onRestoreInstanceState传入的参数为null时（onCreate 方法通过冷启动触发），当通过热启动触发时，传入的参数为bundle.\n\n```\n@Override\nprotected void onRestoreInstanceState(Bundle inState) {\n   instantiateFragments(inState);\n}\n```\n\n当用户旋转设备时，Android 将销毁Activity,并在销毁前触发onSaveInstanceState，允许开发者来\n保存数据。一旦activity被重新启动，这个OS 将触发onRestoreInstanceState 恢复开发者旋转前的保存的状态。\n\n我鼓励你继续更深调查Android框架。因为所有类型都有细微的差别,他们将简化Android应用程序开发工作。\n\n\n\n\t","slug":"Activity销毁时如何保存Fragment状态","published":1,"updated":"2017-05-02T08:51:04.937Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cj2pu8fg000021kwclqg6efsi","content":"<p>转载请标明出处：<br><a href=\"http://blog.csdn.net/a940659387/article/details/50730076\" target=\"_blank\" rel=\"external\">http://blog.csdn.net/a940659387/article/details/50730076</a></p>\n<p>原文：<a href=\"http://emuneee.com/blog/2013/01/07/saving-fragment-states/\" target=\"_blank\" rel=\"external\">http://emuneee.com/blog/2013/01/07/saving-fragment-states/</a><br>在Android 3.0(SDK 11)以后，Android 出现了一个伟大的功能：如何在你的App中保存和还原你的Framgent数据。<br><a id=\"more\"></a></p>\n<h3 id=\"它是什么\"><a href=\"#它是什么\" class=\"headerlink\" title=\"它是什么\"></a>它是什么</h3><pre><code>我再我下一个App开发中期的时候参考Android API时,偶然发现  FragmentManager.putFragment(Bundle, String, Fragment) and FragmentManager.getFragment(Bundle, String) 这两个方法。它们的作用？\n\nputFragment\n</code></pre><p>将一个Fragment的引用传递到Bundle中。这个Bundle可以一直保存它的数据，以后通过调用<br>    <a href=\"http://developer.android.com/reference/android/app/FragmentManager.html#getFragment%28android.os.Bundle,%20java.lang.String%29\" target=\"_blank\" rel=\"external\">getFragment(Bundle, String)</a>方法得到一个一样的Fragmet 实例。</p>\n<pre><code>getFragment\n</code></pre><p>取回一个先前通过 <a href=\"http://developer.android.com/reference/android/app/FragmentManager.html#putFragment%28android.os.Bundle,%20java.lang.String,%20android.app.Fragment%29\" target=\"_blank\" rel=\"external\">putFragment(Bundle, String, Fragment)</a>.方法存储的fragment实例。</p>\n<pre><code>根据我的理解，当你把当前的Fragment放置到bundle中，他会保存一个的指针指向这个fragment的地址;当你调用getFragment()方法时，它将返回你通过putFragment保存的指针对应的Fragment实例。\n</code></pre><p>你也可以通过使用FramgentManager APIs 去保存一个fragment 对应的指针（我感觉叫引用更好） 到bundle中 在以后用到时取出。它也允许你实现这个指针的存储跟取出（还原）。 </p>\n<pre><code>---Diane Hackborn ,Android 架构师。  [Source](https://groups.google.com/forum/?fromgroups=#!topic/android-developers/NBlMJnMaGbo)\n</code></pre><h3 id=\"如何去使用它\"><a href=\"#如何去使用它\" class=\"headerlink\" title=\"如何去使用它\"></a>如何去使用它</h3><p>一个使用这个API的方法是在我的这个Acticity的创建和销毁的时候。自fragment出现以来，我通常用两个Activity来使用它，一个是我的activity,另一个用来设置Fragment。我再我的activity中管理fragment.</p>\n<p><strong>putFragment</strong></p>\n<pre><code>在activity的 onSaveInstanceState 像这样使用：\n</code></pre><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div></pre></td><td class=\"code\"><pre><div class=\"line\"></div><div class=\"line\">@Override</div><div class=\"line\">protected void onSaveInstanceState(Bundle outState) &#123;</div><div class=\"line\">   FragmentManager manager = getFragmentManager();</div><div class=\"line\">   manager.putFragment(outState, MyFragment.TAG, mMyFragment);</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>MyFragment 是一个在我应用中创建的Fragment，这个bundle,outState,只是一个简单的bunlde,它将存储你fragment(即MyFragment)对应的引用（指针）。 MyFragment.TAG 是你的fragment指针以后会用到的key值。</p>\n<p><strong>GetFragment</strong></p>\n<p>我有一个自定义方法（instantiateFragments） ，它会做一到两件事情：当我的应用是冷启动时抓取我的fragment实例 或者 获得现在的MyFragment内容。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div></pre></td><td class=\"code\"><pre><div class=\"line\">private void instantiateFragments(Bundle inState) &#123;</div><div class=\"line\">   FragmentManager manager = getFragmentManager();</div><div class=\"line\">   FragmentTransaction transaction = manager.beginTransaction();</div><div class=\"line\"></div><div class=\"line\">   if (inState != null) &#123;</div><div class=\"line\">      mMyFragment = (MyFragment) manager.getFragment(inState, MyFragment.TAG);</div><div class=\"line\">   &#125; else &#123;</div><div class=\"line\">      mMyFragment = new MyFragment();</div><div class=\"line\">      transaction.add(R.id.fragment, mMyFragment, MyFragment.TAG);</div><div class=\"line\">      transaction.commit();</div><div class=\"line\">   &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>我在我的activity中调用instantiateFragments 这个方法，onRestoreInstanceState传入的参数为null时（onCreate 方法通过冷启动触发），当通过热启动触发时，传入的参数为bundle.</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\">@Override</div><div class=\"line\">protected void onRestoreInstanceState(Bundle inState) &#123;</div><div class=\"line\">   instantiateFragments(inState);</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>当用户旋转设备时，Android 将销毁Activity,并在销毁前触发onSaveInstanceState，允许开发者来<br>保存数据。一旦activity被重新启动，这个OS 将触发onRestoreInstanceState 恢复开发者旋转前的保存的状态。</p>\n<p>我鼓励你继续更深调查Android框架。因为所有类型都有细微的差别,他们将简化Android应用程序开发工作。</p>\n","site":{"data":{}},"excerpt":"<p>转载请标明出处：<br><a href=\"http://blog.csdn.net/a940659387/article/details/50730076\">http://blog.csdn.net/a940659387/article/details/50730076</a></p>\n<p>原文：<a href=\"http://emuneee.com/blog/2013/01/07/saving-fragment-states/\">http://emuneee.com/blog/2013/01/07/saving-fragment-states/</a><br>在Android 3.0(SDK 11)以后，Android 出现了一个伟大的功能：如何在你的App中保存和还原你的Framgent数据。<br>","more":"</p>\n<h3 id=\"它是什么\"><a href=\"#它是什么\" class=\"headerlink\" title=\"它是什么\"></a>它是什么</h3><pre><code>我再我下一个App开发中期的时候参考Android API时,偶然发现  FragmentManager.putFragment(Bundle, String, Fragment) and FragmentManager.getFragment(Bundle, String) 这两个方法。它们的作用？\n\nputFragment\n</code></pre><p>将一个Fragment的引用传递到Bundle中。这个Bundle可以一直保存它的数据，以后通过调用<br>    <a href=\"http://developer.android.com/reference/android/app/FragmentManager.html#getFragment%28android.os.Bundle,%20java.lang.String%29\">getFragment(Bundle, String)</a>方法得到一个一样的Fragmet 实例。</p>\n<pre><code>getFragment\n</code></pre><p>取回一个先前通过 <a href=\"http://developer.android.com/reference/android/app/FragmentManager.html#putFragment%28android.os.Bundle,%20java.lang.String,%20android.app.Fragment%29\">putFragment(Bundle, String, Fragment)</a>.方法存储的fragment实例。</p>\n<pre><code>根据我的理解，当你把当前的Fragment放置到bundle中，他会保存一个的指针指向这个fragment的地址;当你调用getFragment()方法时，它将返回你通过putFragment保存的指针对应的Fragment实例。\n</code></pre><p>你也可以通过使用FramgentManager APIs 去保存一个fragment 对应的指针（我感觉叫引用更好） 到bundle中 在以后用到时取出。它也允许你实现这个指针的存储跟取出（还原）。 </p>\n<pre><code>---Diane Hackborn ,Android 架构师。  [Source](https://groups.google.com/forum/?fromgroups=#!topic/android-developers/NBlMJnMaGbo)\n</code></pre><h3 id=\"如何去使用它\"><a href=\"#如何去使用它\" class=\"headerlink\" title=\"如何去使用它\"></a>如何去使用它</h3><p>一个使用这个API的方法是在我的这个Acticity的创建和销毁的时候。自fragment出现以来，我通常用两个Activity来使用它，一个是我的activity,另一个用来设置Fragment。我再我的activity中管理fragment.</p>\n<p><strong>putFragment</strong></p>\n<pre><code>在activity的 onSaveInstanceState 像这样使用：\n</code></pre><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div></pre></td><td class=\"code\"><pre><div class=\"line\"></div><div class=\"line\">@Override</div><div class=\"line\">protected void onSaveInstanceState(Bundle outState) &#123;</div><div class=\"line\">   FragmentManager manager = getFragmentManager();</div><div class=\"line\">   manager.putFragment(outState, MyFragment.TAG, mMyFragment);</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>MyFragment 是一个在我应用中创建的Fragment，这个bundle,outState,只是一个简单的bunlde,它将存储你fragment(即MyFragment)对应的引用（指针）。 MyFragment.TAG 是你的fragment指针以后会用到的key值。</p>\n<p><strong>GetFragment</strong></p>\n<p>我有一个自定义方法（instantiateFragments） ，它会做一到两件事情：当我的应用是冷启动时抓取我的fragment实例 或者 获得现在的MyFragment内容。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div></pre></td><td class=\"code\"><pre><div class=\"line\">private void instantiateFragments(Bundle inState) &#123;</div><div class=\"line\">   FragmentManager manager = getFragmentManager();</div><div class=\"line\">   FragmentTransaction transaction = manager.beginTransaction();</div><div class=\"line\"></div><div class=\"line\">   if (inState != null) &#123;</div><div class=\"line\">      mMyFragment = (MyFragment) manager.getFragment(inState, MyFragment.TAG);</div><div class=\"line\">   &#125; else &#123;</div><div class=\"line\">      mMyFragment = new MyFragment();</div><div class=\"line\">      transaction.add(R.id.fragment, mMyFragment, MyFragment.TAG);</div><div class=\"line\">      transaction.commit();</div><div class=\"line\">   &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>我在我的activity中调用instantiateFragments 这个方法，onRestoreInstanceState传入的参数为null时（onCreate 方法通过冷启动触发），当通过热启动触发时，传入的参数为bundle.</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\">@Override</div><div class=\"line\">protected void onRestoreInstanceState(Bundle inState) &#123;</div><div class=\"line\">   instantiateFragments(inState);</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>当用户旋转设备时，Android 将销毁Activity,并在销毁前触发onSaveInstanceState，允许开发者来<br>保存数据。一旦activity被重新启动，这个OS 将触发onRestoreInstanceState 恢复开发者旋转前的保存的状态。</p>\n<p>我鼓励你继续更深调查Android框架。因为所有类型都有细微的差别,他们将简化Android应用程序开发工作。</p>"},{"title":"android 自动播放Banner","date":"2017-04-28T07:28:17.000Z","_content":"### 先看一下效果图 ###\n![这里写图片描述](http://img.blog.csdn.net/20160115104236488)\n\n#### 支持本地图片以及网络图片or本地网络混合。 ####\n<!-- more -->\n使用方式：\n\n```\n<com.jalen.autobanner.BannerView\n        android:id=\"@+id/banner\"\n        android:layout_width=\"match_parent\"\n        android:layout_height=\"230dip\">\n</com.jalen.autobanner.BannerView>\n```\n\n核心的实现代码\n\n```\n int length = mList.size();\n        View view = LayoutInflater.from(mContext).inflate(R.layout.banner_view,this,true);\n        LinearLayout ll = (LinearLayout) view.findViewById(R.id.ll_points);\n        vp= (ViewPager) view.findViewById(R.id.vp);\n        ll.removeAllViews();\n        LinearLayout.LayoutParams ll_parmas = new LinearLayout.LayoutParams(LayoutParams.WRAP_CONTENT,LayoutParams.WRAP_CONTENT);\n        ll_parmas.leftMargin=5;\n        ll_parmas.rightMargin=5;\n        for(int i=0;i<length;i++){\n            ImageView img = new ImageView(mContext);\n            img.setLayoutParams(ll_parmas);\n            if(i==0){\n                img.setImageResource(R.mipmap.dot_focus);\n            }else{\n                img.setImageResource(R.mipmap.dot_blur);\n            }\n            ll.addView(img);\n            mImgs.add(img);\n\n            final ImageView imgforview = new ImageView(mContext);\n            imgforview.setOnClickListener(this);\n            imgforview.setScaleType(ImageView.ScaleType.FIT_XY);\n            if(mList.get(i).getType()==0){//本地图片\n                imgforview.setImageResource(mList.get(i).getDrawableforint());\n\n            }else{//网络\n                Glide.with(mContext).load(mList.get(i).getDrawableforurl()).diskCacheStrategy(DiskCacheStrategy.ALL).into(imgforview);\n//                Glide.with(mContext).load(mList.get(i).getDrawableforurl()).listener(new RequestListener<String, GlideDrawable>() {\n//                    @Override\n//                    public boolean onException(Exception e, String model, Target<GlideDrawable> target, boolean isFirstResource) {\n//                        Log.d(\"yu\",\"Faile:\"+e.toString());\n//                        return false;\n//                    }\n//\n//                    @Override\n//                    public boolean onResourceReady(GlideDrawable resource, String model, Target<GlideDrawable> target, boolean isFromMemoryCache, boolean isFirstResource) {\n//                            imgforview.setImageDrawable(resource);\n//                        return false;\n//                    }\n//                }).into(imgforview);\n//                Log.d(\"yu\",\"url: \"+mList.get(i).getDrawableforurl());\n            }\n            mViews.add(imgforview);\n        }\n\n        vp.setAdapter(new MyAdapter());\n        vp.addOnPageChangeListener(onPageChange);\n```\n\n自动轮播利用的是handler的postdelay方法。\n\n```\nprivate Runnable task = new Runnable() {\n        @Override\n        public void run() {\n            if(isAuto){\n               currentItem = currentItem%(mViews.size());\n//                Log.d(\"yu\",\"runalbe \"+currentItem);\n                if(currentItem==0){\n                    vp.setCurrentItem(currentItem,false);\n                }else{\n                    vp.setCurrentItem(currentItem);\n                }\n                currentItem++;\n                mHandle.postDelayed(task,delaytime);\n            }else{\n                mHandle.postDelayed(task,delaytime);\n            }\n        }\n    };\n```\n\n利用isAuto判断是否正在自动轮播 如果为false 不自动切换item。isAuto赋值操作位于OnPageChangeListener的onPageScrollStateChanged方法中：\n\n```\n public void onPageScrollStateChanged(int state) {\n\n            switch (state){\n                case ViewPager.SCROLL_STATE_IDLE://用户什么都没有操作\n                    isAuto=true;\n                    currentItem = vp.getCurrentItem();\n//                    Log.d(\"yu\",\"IDLE\"+currentItem);\n//                    if(vp.getCurrentItem()==mViews.size()){\n//                        vp.setCurrentItem(0,false);\n//                    }\n                    break;\n                case ViewPager.SCROLL_STATE_DRAGGING://正在滑动\n                    isAuto =false;\n                    break;\n                case ViewPager.SCROLL_STATE_SETTLING://滑动结束\n                    isAuto=true;\n                    break;\n\n            }\n        }\n```\n\n当状态为SCROLL_STATE_DRAGGING时  说明用户正在操作 ，看下源码中的解释：\n\n```\n /**\n     * Indicates that the pager is in an idle, settled state. The current page\n     * is fully in view and no animation is in progress.\n     */\n    public static final int SCROLL_STATE_IDLE = 0;\n\n    /**\n     * Indicates that the pager is currently being dragged by the user.\n     */\n    public static final int SCROLL_STATE_DRAGGING = 1;\n\n    /**\n     * Indicates that the pager is in the process of settling to a final position.\n     */\n    public static final int SCROLL_STATE_SETTLING = 2;\n```\n\n大致意思呢就是 0代码没有任何操作。1页面正在被用户拖动。2代表成功切换至下一页面。\n\n\n### 源码地址 ###\n\n[点击跳转](https://github.com/yudehai0204/autoBanner)\n\n有问题随时欢迎Issues;\n","source":"_posts/android-自动播放Banner.md","raw":"---\ntitle: android 自动播放Banner\ndate: 2017-04-28 15:28:17\ntags: Android\n---\n### 先看一下效果图 ###\n![这里写图片描述](http://img.blog.csdn.net/20160115104236488)\n\n#### 支持本地图片以及网络图片or本地网络混合。 ####\n<!-- more -->\n使用方式：\n\n```\n<com.jalen.autobanner.BannerView\n        android:id=\"@+id/banner\"\n        android:layout_width=\"match_parent\"\n        android:layout_height=\"230dip\">\n</com.jalen.autobanner.BannerView>\n```\n\n核心的实现代码\n\n```\n int length = mList.size();\n        View view = LayoutInflater.from(mContext).inflate(R.layout.banner_view,this,true);\n        LinearLayout ll = (LinearLayout) view.findViewById(R.id.ll_points);\n        vp= (ViewPager) view.findViewById(R.id.vp);\n        ll.removeAllViews();\n        LinearLayout.LayoutParams ll_parmas = new LinearLayout.LayoutParams(LayoutParams.WRAP_CONTENT,LayoutParams.WRAP_CONTENT);\n        ll_parmas.leftMargin=5;\n        ll_parmas.rightMargin=5;\n        for(int i=0;i<length;i++){\n            ImageView img = new ImageView(mContext);\n            img.setLayoutParams(ll_parmas);\n            if(i==0){\n                img.setImageResource(R.mipmap.dot_focus);\n            }else{\n                img.setImageResource(R.mipmap.dot_blur);\n            }\n            ll.addView(img);\n            mImgs.add(img);\n\n            final ImageView imgforview = new ImageView(mContext);\n            imgforview.setOnClickListener(this);\n            imgforview.setScaleType(ImageView.ScaleType.FIT_XY);\n            if(mList.get(i).getType()==0){//本地图片\n                imgforview.setImageResource(mList.get(i).getDrawableforint());\n\n            }else{//网络\n                Glide.with(mContext).load(mList.get(i).getDrawableforurl()).diskCacheStrategy(DiskCacheStrategy.ALL).into(imgforview);\n//                Glide.with(mContext).load(mList.get(i).getDrawableforurl()).listener(new RequestListener<String, GlideDrawable>() {\n//                    @Override\n//                    public boolean onException(Exception e, String model, Target<GlideDrawable> target, boolean isFirstResource) {\n//                        Log.d(\"yu\",\"Faile:\"+e.toString());\n//                        return false;\n//                    }\n//\n//                    @Override\n//                    public boolean onResourceReady(GlideDrawable resource, String model, Target<GlideDrawable> target, boolean isFromMemoryCache, boolean isFirstResource) {\n//                            imgforview.setImageDrawable(resource);\n//                        return false;\n//                    }\n//                }).into(imgforview);\n//                Log.d(\"yu\",\"url: \"+mList.get(i).getDrawableforurl());\n            }\n            mViews.add(imgforview);\n        }\n\n        vp.setAdapter(new MyAdapter());\n        vp.addOnPageChangeListener(onPageChange);\n```\n\n自动轮播利用的是handler的postdelay方法。\n\n```\nprivate Runnable task = new Runnable() {\n        @Override\n        public void run() {\n            if(isAuto){\n               currentItem = currentItem%(mViews.size());\n//                Log.d(\"yu\",\"runalbe \"+currentItem);\n                if(currentItem==0){\n                    vp.setCurrentItem(currentItem,false);\n                }else{\n                    vp.setCurrentItem(currentItem);\n                }\n                currentItem++;\n                mHandle.postDelayed(task,delaytime);\n            }else{\n                mHandle.postDelayed(task,delaytime);\n            }\n        }\n    };\n```\n\n利用isAuto判断是否正在自动轮播 如果为false 不自动切换item。isAuto赋值操作位于OnPageChangeListener的onPageScrollStateChanged方法中：\n\n```\n public void onPageScrollStateChanged(int state) {\n\n            switch (state){\n                case ViewPager.SCROLL_STATE_IDLE://用户什么都没有操作\n                    isAuto=true;\n                    currentItem = vp.getCurrentItem();\n//                    Log.d(\"yu\",\"IDLE\"+currentItem);\n//                    if(vp.getCurrentItem()==mViews.size()){\n//                        vp.setCurrentItem(0,false);\n//                    }\n                    break;\n                case ViewPager.SCROLL_STATE_DRAGGING://正在滑动\n                    isAuto =false;\n                    break;\n                case ViewPager.SCROLL_STATE_SETTLING://滑动结束\n                    isAuto=true;\n                    break;\n\n            }\n        }\n```\n\n当状态为SCROLL_STATE_DRAGGING时  说明用户正在操作 ，看下源码中的解释：\n\n```\n /**\n     * Indicates that the pager is in an idle, settled state. The current page\n     * is fully in view and no animation is in progress.\n     */\n    public static final int SCROLL_STATE_IDLE = 0;\n\n    /**\n     * Indicates that the pager is currently being dragged by the user.\n     */\n    public static final int SCROLL_STATE_DRAGGING = 1;\n\n    /**\n     * Indicates that the pager is in the process of settling to a final position.\n     */\n    public static final int SCROLL_STATE_SETTLING = 2;\n```\n\n大致意思呢就是 0代码没有任何操作。1页面正在被用户拖动。2代表成功切换至下一页面。\n\n\n### 源码地址 ###\n\n[点击跳转](https://github.com/yudehai0204/autoBanner)\n\n有问题随时欢迎Issues;\n","slug":"android-自动播放Banner","published":1,"updated":"2017-05-02T08:51:26.057Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cj2pu8fg900051kwcj9chh8tx","content":"<h3 id=\"先看一下效果图\"><a href=\"#先看一下效果图\" class=\"headerlink\" title=\"先看一下效果图\"></a>先看一下效果图</h3><p><img src=\"http://img.blog.csdn.net/20160115104236488\" alt=\"这里写图片描述\"></p>\n<h4 id=\"支持本地图片以及网络图片or本地网络混合。\"><a href=\"#支持本地图片以及网络图片or本地网络混合。\" class=\"headerlink\" title=\"支持本地图片以及网络图片or本地网络混合。\"></a>支持本地图片以及网络图片or本地网络混合。</h4><a id=\"more\"></a>\n<p>使用方式：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\">&lt;com.jalen.autobanner.BannerView</div><div class=\"line\">        android:id=&quot;@+id/banner&quot;</div><div class=\"line\">        android:layout_width=&quot;match_parent&quot;</div><div class=\"line\">        android:layout_height=&quot;230dip&quot;&gt;</div><div class=\"line\">&lt;/com.jalen.autobanner.BannerView&gt;</div></pre></td></tr></table></figure>\n<p>核心的实现代码</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div><div class=\"line\">45</div><div class=\"line\">46</div><div class=\"line\">47</div></pre></td><td class=\"code\"><pre><div class=\"line\"> int length = mList.size();</div><div class=\"line\">        View view = LayoutInflater.from(mContext).inflate(R.layout.banner_view,this,true);</div><div class=\"line\">        LinearLayout ll = (LinearLayout) view.findViewById(R.id.ll_points);</div><div class=\"line\">        vp= (ViewPager) view.findViewById(R.id.vp);</div><div class=\"line\">        ll.removeAllViews();</div><div class=\"line\">        LinearLayout.LayoutParams ll_parmas = new LinearLayout.LayoutParams(LayoutParams.WRAP_CONTENT,LayoutParams.WRAP_CONTENT);</div><div class=\"line\">        ll_parmas.leftMargin=5;</div><div class=\"line\">        ll_parmas.rightMargin=5;</div><div class=\"line\">        for(int i=0;i&lt;length;i++)&#123;</div><div class=\"line\">            ImageView img = new ImageView(mContext);</div><div class=\"line\">            img.setLayoutParams(ll_parmas);</div><div class=\"line\">            if(i==0)&#123;</div><div class=\"line\">                img.setImageResource(R.mipmap.dot_focus);</div><div class=\"line\">            &#125;else&#123;</div><div class=\"line\">                img.setImageResource(R.mipmap.dot_blur);</div><div class=\"line\">            &#125;</div><div class=\"line\">            ll.addView(img);</div><div class=\"line\">            mImgs.add(img);</div><div class=\"line\"></div><div class=\"line\">            final ImageView imgforview = new ImageView(mContext);</div><div class=\"line\">            imgforview.setOnClickListener(this);</div><div class=\"line\">            imgforview.setScaleType(ImageView.ScaleType.FIT_XY);</div><div class=\"line\">            if(mList.get(i).getType()==0)&#123;//本地图片</div><div class=\"line\">                imgforview.setImageResource(mList.get(i).getDrawableforint());</div><div class=\"line\"></div><div class=\"line\">            &#125;else&#123;//网络</div><div class=\"line\">                Glide.with(mContext).load(mList.get(i).getDrawableforurl()).diskCacheStrategy(DiskCacheStrategy.ALL).into(imgforview);</div><div class=\"line\">//                Glide.with(mContext).load(mList.get(i).getDrawableforurl()).listener(new RequestListener&lt;String, GlideDrawable&gt;() &#123;</div><div class=\"line\">//                    @Override</div><div class=\"line\">//                    public boolean onException(Exception e, String model, Target&lt;GlideDrawable&gt; target, boolean isFirstResource) &#123;</div><div class=\"line\">//                        Log.d(&quot;yu&quot;,&quot;Faile:&quot;+e.toString());</div><div class=\"line\">//                        return false;</div><div class=\"line\">//                    &#125;</div><div class=\"line\">//</div><div class=\"line\">//                    @Override</div><div class=\"line\">//                    public boolean onResourceReady(GlideDrawable resource, String model, Target&lt;GlideDrawable&gt; target, boolean isFromMemoryCache, boolean isFirstResource) &#123;</div><div class=\"line\">//                            imgforview.setImageDrawable(resource);</div><div class=\"line\">//                        return false;</div><div class=\"line\">//                    &#125;</div><div class=\"line\">//                &#125;).into(imgforview);</div><div class=\"line\">//                Log.d(&quot;yu&quot;,&quot;url: &quot;+mList.get(i).getDrawableforurl());</div><div class=\"line\">            &#125;</div><div class=\"line\">            mViews.add(imgforview);</div><div class=\"line\">        &#125;</div><div class=\"line\"></div><div class=\"line\">        vp.setAdapter(new MyAdapter());</div><div class=\"line\">        vp.addOnPageChangeListener(onPageChange);</div></pre></td></tr></table></figure>\n<p>自动轮播利用的是handler的postdelay方法。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div></pre></td><td class=\"code\"><pre><div class=\"line\">private Runnable task = new Runnable() &#123;</div><div class=\"line\">        @Override</div><div class=\"line\">        public void run() &#123;</div><div class=\"line\">            if(isAuto)&#123;</div><div class=\"line\">               currentItem = currentItem%(mViews.size());</div><div class=\"line\">//                Log.d(&quot;yu&quot;,&quot;runalbe &quot;+currentItem);</div><div class=\"line\">                if(currentItem==0)&#123;</div><div class=\"line\">                    vp.setCurrentItem(currentItem,false);</div><div class=\"line\">                &#125;else&#123;</div><div class=\"line\">                    vp.setCurrentItem(currentItem);</div><div class=\"line\">                &#125;</div><div class=\"line\">                currentItem++;</div><div class=\"line\">                mHandle.postDelayed(task,delaytime);</div><div class=\"line\">            &#125;else&#123;</div><div class=\"line\">                mHandle.postDelayed(task,delaytime);</div><div class=\"line\">            &#125;</div><div class=\"line\">        &#125;</div><div class=\"line\">    &#125;;</div></pre></td></tr></table></figure>\n<p>利用isAuto判断是否正在自动轮播 如果为false 不自动切换item。isAuto赋值操作位于OnPageChangeListener的onPageScrollStateChanged方法中：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div></pre></td><td class=\"code\"><pre><div class=\"line\"> public void onPageScrollStateChanged(int state) &#123;</div><div class=\"line\"></div><div class=\"line\">            switch (state)&#123;</div><div class=\"line\">                case ViewPager.SCROLL_STATE_IDLE://用户什么都没有操作</div><div class=\"line\">                    isAuto=true;</div><div class=\"line\">                    currentItem = vp.getCurrentItem();</div><div class=\"line\">//                    Log.d(&quot;yu&quot;,&quot;IDLE&quot;+currentItem);</div><div class=\"line\">//                    if(vp.getCurrentItem()==mViews.size())&#123;</div><div class=\"line\">//                        vp.setCurrentItem(0,false);</div><div class=\"line\">//                    &#125;</div><div class=\"line\">                    break;</div><div class=\"line\">                case ViewPager.SCROLL_STATE_DRAGGING://正在滑动</div><div class=\"line\">                    isAuto =false;</div><div class=\"line\">                    break;</div><div class=\"line\">                case ViewPager.SCROLL_STATE_SETTLING://滑动结束</div><div class=\"line\">                    isAuto=true;</div><div class=\"line\">                    break;</div><div class=\"line\"></div><div class=\"line\">            &#125;</div><div class=\"line\">        &#125;</div></pre></td></tr></table></figure>\n<p>当状态为SCROLL_STATE_DRAGGING时  说明用户正在操作 ，看下源码中的解释：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div></pre></td><td class=\"code\"><pre><div class=\"line\">/**</div><div class=\"line\">    * Indicates that the pager is in an idle, settled state. The current page</div><div class=\"line\">    * is fully in view and no animation is in progress.</div><div class=\"line\">    */</div><div class=\"line\">   public static final int SCROLL_STATE_IDLE = 0;</div><div class=\"line\"></div><div class=\"line\">   /**</div><div class=\"line\">    * Indicates that the pager is currently being dragged by the user.</div><div class=\"line\">    */</div><div class=\"line\">   public static final int SCROLL_STATE_DRAGGING = 1;</div><div class=\"line\"></div><div class=\"line\">   /**</div><div class=\"line\">    * Indicates that the pager is in the process of settling to a final position.</div><div class=\"line\">    */</div><div class=\"line\">   public static final int SCROLL_STATE_SETTLING = 2;</div></pre></td></tr></table></figure>\n<p>大致意思呢就是 0代码没有任何操作。1页面正在被用户拖动。2代表成功切换至下一页面。</p>\n<h3 id=\"源码地址\"><a href=\"#源码地址\" class=\"headerlink\" title=\"源码地址\"></a>源码地址</h3><p><a href=\"https://github.com/yudehai0204/autoBanner\" target=\"_blank\" rel=\"external\">点击跳转</a></p>\n<p>有问题随时欢迎Issues;</p>\n","site":{"data":{}},"excerpt":"<h3 id=\"先看一下效果图\"><a href=\"#先看一下效果图\" class=\"headerlink\" title=\"先看一下效果图\"></a>先看一下效果图</h3><p><img src=\"http://img.blog.csdn.net/20160115104236488\" alt=\"这里写图片描述\"></p>\n<h4 id=\"支持本地图片以及网络图片or本地网络混合。\"><a href=\"#支持本地图片以及网络图片or本地网络混合。\" class=\"headerlink\" title=\"支持本地图片以及网络图片or本地网络混合。\"></a>支持本地图片以及网络图片or本地网络混合。</h4>","more":"<p>使用方式：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\">&lt;com.jalen.autobanner.BannerView</div><div class=\"line\">        android:id=&quot;@+id/banner&quot;</div><div class=\"line\">        android:layout_width=&quot;match_parent&quot;</div><div class=\"line\">        android:layout_height=&quot;230dip&quot;&gt;</div><div class=\"line\">&lt;/com.jalen.autobanner.BannerView&gt;</div></pre></td></tr></table></figure>\n<p>核心的实现代码</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div><div class=\"line\">45</div><div class=\"line\">46</div><div class=\"line\">47</div></pre></td><td class=\"code\"><pre><div class=\"line\"> int length = mList.size();</div><div class=\"line\">        View view = LayoutInflater.from(mContext).inflate(R.layout.banner_view,this,true);</div><div class=\"line\">        LinearLayout ll = (LinearLayout) view.findViewById(R.id.ll_points);</div><div class=\"line\">        vp= (ViewPager) view.findViewById(R.id.vp);</div><div class=\"line\">        ll.removeAllViews();</div><div class=\"line\">        LinearLayout.LayoutParams ll_parmas = new LinearLayout.LayoutParams(LayoutParams.WRAP_CONTENT,LayoutParams.WRAP_CONTENT);</div><div class=\"line\">        ll_parmas.leftMargin=5;</div><div class=\"line\">        ll_parmas.rightMargin=5;</div><div class=\"line\">        for(int i=0;i&lt;length;i++)&#123;</div><div class=\"line\">            ImageView img = new ImageView(mContext);</div><div class=\"line\">            img.setLayoutParams(ll_parmas);</div><div class=\"line\">            if(i==0)&#123;</div><div class=\"line\">                img.setImageResource(R.mipmap.dot_focus);</div><div class=\"line\">            &#125;else&#123;</div><div class=\"line\">                img.setImageResource(R.mipmap.dot_blur);</div><div class=\"line\">            &#125;</div><div class=\"line\">            ll.addView(img);</div><div class=\"line\">            mImgs.add(img);</div><div class=\"line\"></div><div class=\"line\">            final ImageView imgforview = new ImageView(mContext);</div><div class=\"line\">            imgforview.setOnClickListener(this);</div><div class=\"line\">            imgforview.setScaleType(ImageView.ScaleType.FIT_XY);</div><div class=\"line\">            if(mList.get(i).getType()==0)&#123;//本地图片</div><div class=\"line\">                imgforview.setImageResource(mList.get(i).getDrawableforint());</div><div class=\"line\"></div><div class=\"line\">            &#125;else&#123;//网络</div><div class=\"line\">                Glide.with(mContext).load(mList.get(i).getDrawableforurl()).diskCacheStrategy(DiskCacheStrategy.ALL).into(imgforview);</div><div class=\"line\">//                Glide.with(mContext).load(mList.get(i).getDrawableforurl()).listener(new RequestListener&lt;String, GlideDrawable&gt;() &#123;</div><div class=\"line\">//                    @Override</div><div class=\"line\">//                    public boolean onException(Exception e, String model, Target&lt;GlideDrawable&gt; target, boolean isFirstResource) &#123;</div><div class=\"line\">//                        Log.d(&quot;yu&quot;,&quot;Faile:&quot;+e.toString());</div><div class=\"line\">//                        return false;</div><div class=\"line\">//                    &#125;</div><div class=\"line\">//</div><div class=\"line\">//                    @Override</div><div class=\"line\">//                    public boolean onResourceReady(GlideDrawable resource, String model, Target&lt;GlideDrawable&gt; target, boolean isFromMemoryCache, boolean isFirstResource) &#123;</div><div class=\"line\">//                            imgforview.setImageDrawable(resource);</div><div class=\"line\">//                        return false;</div><div class=\"line\">//                    &#125;</div><div class=\"line\">//                &#125;).into(imgforview);</div><div class=\"line\">//                Log.d(&quot;yu&quot;,&quot;url: &quot;+mList.get(i).getDrawableforurl());</div><div class=\"line\">            &#125;</div><div class=\"line\">            mViews.add(imgforview);</div><div class=\"line\">        &#125;</div><div class=\"line\"></div><div class=\"line\">        vp.setAdapter(new MyAdapter());</div><div class=\"line\">        vp.addOnPageChangeListener(onPageChange);</div></pre></td></tr></table></figure>\n<p>自动轮播利用的是handler的postdelay方法。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div></pre></td><td class=\"code\"><pre><div class=\"line\">private Runnable task = new Runnable() &#123;</div><div class=\"line\">        @Override</div><div class=\"line\">        public void run() &#123;</div><div class=\"line\">            if(isAuto)&#123;</div><div class=\"line\">               currentItem = currentItem%(mViews.size());</div><div class=\"line\">//                Log.d(&quot;yu&quot;,&quot;runalbe &quot;+currentItem);</div><div class=\"line\">                if(currentItem==0)&#123;</div><div class=\"line\">                    vp.setCurrentItem(currentItem,false);</div><div class=\"line\">                &#125;else&#123;</div><div class=\"line\">                    vp.setCurrentItem(currentItem);</div><div class=\"line\">                &#125;</div><div class=\"line\">                currentItem++;</div><div class=\"line\">                mHandle.postDelayed(task,delaytime);</div><div class=\"line\">            &#125;else&#123;</div><div class=\"line\">                mHandle.postDelayed(task,delaytime);</div><div class=\"line\">            &#125;</div><div class=\"line\">        &#125;</div><div class=\"line\">    &#125;;</div></pre></td></tr></table></figure>\n<p>利用isAuto判断是否正在自动轮播 如果为false 不自动切换item。isAuto赋值操作位于OnPageChangeListener的onPageScrollStateChanged方法中：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div></pre></td><td class=\"code\"><pre><div class=\"line\"> public void onPageScrollStateChanged(int state) &#123;</div><div class=\"line\"></div><div class=\"line\">            switch (state)&#123;</div><div class=\"line\">                case ViewPager.SCROLL_STATE_IDLE://用户什么都没有操作</div><div class=\"line\">                    isAuto=true;</div><div class=\"line\">                    currentItem = vp.getCurrentItem();</div><div class=\"line\">//                    Log.d(&quot;yu&quot;,&quot;IDLE&quot;+currentItem);</div><div class=\"line\">//                    if(vp.getCurrentItem()==mViews.size())&#123;</div><div class=\"line\">//                        vp.setCurrentItem(0,false);</div><div class=\"line\">//                    &#125;</div><div class=\"line\">                    break;</div><div class=\"line\">                case ViewPager.SCROLL_STATE_DRAGGING://正在滑动</div><div class=\"line\">                    isAuto =false;</div><div class=\"line\">                    break;</div><div class=\"line\">                case ViewPager.SCROLL_STATE_SETTLING://滑动结束</div><div class=\"line\">                    isAuto=true;</div><div class=\"line\">                    break;</div><div class=\"line\"></div><div class=\"line\">            &#125;</div><div class=\"line\">        &#125;</div></pre></td></tr></table></figure>\n<p>当状态为SCROLL_STATE_DRAGGING时  说明用户正在操作 ，看下源码中的解释：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div></pre></td><td class=\"code\"><pre><div class=\"line\">/**</div><div class=\"line\">    * Indicates that the pager is in an idle, settled state. The current page</div><div class=\"line\">    * is fully in view and no animation is in progress.</div><div class=\"line\">    */</div><div class=\"line\">   public static final int SCROLL_STATE_IDLE = 0;</div><div class=\"line\"></div><div class=\"line\">   /**</div><div class=\"line\">    * Indicates that the pager is currently being dragged by the user.</div><div class=\"line\">    */</div><div class=\"line\">   public static final int SCROLL_STATE_DRAGGING = 1;</div><div class=\"line\"></div><div class=\"line\">   /**</div><div class=\"line\">    * Indicates that the pager is in the process of settling to a final position.</div><div class=\"line\">    */</div><div class=\"line\">   public static final int SCROLL_STATE_SETTLING = 2;</div></pre></td></tr></table></figure>\n<p>大致意思呢就是 0代码没有任何操作。1页面正在被用户拖动。2代表成功切换至下一页面。</p>\n<h3 id=\"源码地址\"><a href=\"#源码地址\" class=\"headerlink\" title=\"源码地址\"></a>源码地址</h3><p><a href=\"https://github.com/yudehai0204/autoBanner\">点击跳转</a></p>\n<p>有问题随时欢迎Issues;</p>"},{"title":"Hello World","_content":"Welcome to [Hexo](https://hexo.io/)! This is your very first post. Check [documentation](https://hexo.io/docs/) for more info. If you get any problems when using Hexo, you can find the answer in [troubleshooting](https://hexo.io/docs/troubleshooting.html) or you can ask me on [GitHub](https://github.com/hexojs/hexo/issues).\n\n## Quick Start\n\n### Create a new post\n\n``` bash\n$ hexo new \"My New Post\"\n```\n<!-- more -->\nMore info: [Writing](https://hexo.io/docs/writing.html)\n\n### Run server\n\n``` bash\n$ hexo server\n```\n\nMore info: [Server](https://hexo.io/docs/server.html)\n\n### Generate static files\n\n``` bash\n$ hexo generate\n```\n\nMore info: [Generating](https://hexo.io/docs/generating.html)\n\n### Deploy to remote sites\n\n``` bash\n$ hexo deploy\n```\n\nMore info: [Deployment](https://hexo.io/docs/deployment.html)\n","source":"_posts/hello-world.md","raw":"---\ntitle: Hello World\n---\nWelcome to [Hexo](https://hexo.io/)! This is your very first post. Check [documentation](https://hexo.io/docs/) for more info. If you get any problems when using Hexo, you can find the answer in [troubleshooting](https://hexo.io/docs/troubleshooting.html) or you can ask me on [GitHub](https://github.com/hexojs/hexo/issues).\n\n## Quick Start\n\n### Create a new post\n\n``` bash\n$ hexo new \"My New Post\"\n```\n<!-- more -->\nMore info: [Writing](https://hexo.io/docs/writing.html)\n\n### Run server\n\n``` bash\n$ hexo server\n```\n\nMore info: [Server](https://hexo.io/docs/server.html)\n\n### Generate static files\n\n``` bash\n$ hexo generate\n```\n\nMore info: [Generating](https://hexo.io/docs/generating.html)\n\n### Deploy to remote sites\n\n``` bash\n$ hexo deploy\n```\n\nMore info: [Deployment](https://hexo.io/docs/deployment.html)\n","slug":"hello-world","published":1,"date":"2017-04-25T07:01:00.530Z","updated":"2017-05-02T08:51:33.893Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cj2pu8fgb00061kwckwc76ooo","content":"<p>Welcome to <a href=\"https://hexo.io/\" target=\"_blank\" rel=\"external\">Hexo</a>! This is your very first post. Check <a href=\"https://hexo.io/docs/\" target=\"_blank\" rel=\"external\">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href=\"https://hexo.io/docs/troubleshooting.html\" target=\"_blank\" rel=\"external\">troubleshooting</a> or you can ask me on <a href=\"https://github.com/hexojs/hexo/issues\" target=\"_blank\" rel=\"external\">GitHub</a>.</p>\n<h2 id=\"Quick-Start\"><a href=\"#Quick-Start\" class=\"headerlink\" title=\"Quick Start\"></a>Quick Start</h2><h3 id=\"Create-a-new-post\"><a href=\"#Create-a-new-post\" class=\"headerlink\" title=\"Create a new post\"></a>Create a new post</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">$ hexo new <span class=\"string\">\"My New Post\"</span></div></pre></td></tr></table></figure>\n<a id=\"more\"></a>\n<p>More info: <a href=\"https://hexo.io/docs/writing.html\" target=\"_blank\" rel=\"external\">Writing</a></p>\n<h3 id=\"Run-server\"><a href=\"#Run-server\" class=\"headerlink\" title=\"Run server\"></a>Run server</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">$ hexo server</div></pre></td></tr></table></figure>\n<p>More info: <a href=\"https://hexo.io/docs/server.html\" target=\"_blank\" rel=\"external\">Server</a></p>\n<h3 id=\"Generate-static-files\"><a href=\"#Generate-static-files\" class=\"headerlink\" title=\"Generate static files\"></a>Generate static files</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">$ hexo generate</div></pre></td></tr></table></figure>\n<p>More info: <a href=\"https://hexo.io/docs/generating.html\" target=\"_blank\" rel=\"external\">Generating</a></p>\n<h3 id=\"Deploy-to-remote-sites\"><a href=\"#Deploy-to-remote-sites\" class=\"headerlink\" title=\"Deploy to remote sites\"></a>Deploy to remote sites</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">$ hexo deploy</div></pre></td></tr></table></figure>\n<p>More info: <a href=\"https://hexo.io/docs/deployment.html\" target=\"_blank\" rel=\"external\">Deployment</a></p>\n","site":{"data":{}},"excerpt":"<p>Welcome to <a href=\"https://hexo.io/\">Hexo</a>! This is your very first post. Check <a href=\"https://hexo.io/docs/\">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href=\"https://hexo.io/docs/troubleshooting.html\">troubleshooting</a> or you can ask me on <a href=\"https://github.com/hexojs/hexo/issues\">GitHub</a>.</p>\n<h2 id=\"Quick-Start\"><a href=\"#Quick-Start\" class=\"headerlink\" title=\"Quick Start\"></a>Quick Start</h2><h3 id=\"Create-a-new-post\"><a href=\"#Create-a-new-post\" class=\"headerlink\" title=\"Create a new post\"></a>Create a new post</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">$ hexo new <span class=\"string\">\"My New Post\"</span></div></pre></td></tr></table></figure>","more":"<p>More info: <a href=\"https://hexo.io/docs/writing.html\">Writing</a></p>\n<h3 id=\"Run-server\"><a href=\"#Run-server\" class=\"headerlink\" title=\"Run server\"></a>Run server</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">$ hexo server</div></pre></td></tr></table></figure>\n<p>More info: <a href=\"https://hexo.io/docs/server.html\">Server</a></p>\n<h3 id=\"Generate-static-files\"><a href=\"#Generate-static-files\" class=\"headerlink\" title=\"Generate static files\"></a>Generate static files</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">$ hexo generate</div></pre></td></tr></table></figure>\n<p>More info: <a href=\"https://hexo.io/docs/generating.html\">Generating</a></p>\n<h3 id=\"Deploy-to-remote-sites\"><a href=\"#Deploy-to-remote-sites\" class=\"headerlink\" title=\"Deploy to remote sites\"></a>Deploy to remote sites</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">$ hexo deploy</div></pre></td></tr></table></figure>\n<p>More info: <a href=\"https://hexo.io/docs/deployment.html\">Deployment</a></p>"}],"PostAsset":[],"PostCategory":[],"PostTag":[{"post_id":"cj2pu8ffl00001kwchuza5y00","tag_id":"cj2pu8fg600041kwc71u07xwh","_id":"cj2pu8fgf00081kwcl5g8mrdp"},{"post_id":"cj2pu8fg900051kwcj9chh8tx","tag_id":"cj2pu8fg600041kwc71u07xwh","_id":"cj2pu8fgf00091kwcn77f073o"}],"Tag":[{"name":"Android","_id":"cj2pu8fg600041kwc71u07xwh"}]}}